import numpy as np
import matplotlib.pyplot as plt
import cv2
from skimage.measure import shannon_entropy

#from numpy.lib.function_base import gradient
#from random import seed
#from random import randint
import random 
import math
from PIL import Image 
import time
#import statistics as st

beta_entropy = 7.654255092053674

bahram_2021_entropy = 7.6739952595684615

prop_entropy =  7.694180448822675 
best_entropy = 7.694180448822675 


s_box_aes = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box_aes = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

#sboxFRTL =  [55, 200, 157, 98, 251, 4, 81, 174, 191, 64, 21, 234, 115, 140, 217, 38, 199, 56, 109, 146, 11, 244, 161, 94, 79, 176, 229, 26, 131, 124, 41, 214, 151, 104, 61, 194, 91, 164, 241, 14, 31, 224, 181, 74, 211, 44, 121, 134, 103, 152, 205, 50, 171, 84, 1, 254, 239, 16, 69, 186, 35, 220, 137, 118, 247, 8, 93, 162, 59, 196, 145, 110, 127, 128, 213, 42, 179, 76, 25, 230, 7, 248, 173, 82, 203, 52, 97, 158, 143, 112, 37, 218, 67, 188, 233, 22, 87, 168, 253, 2, 155, 100, 49, 206, 223, 32, 117, 138, 19, 236, 185, 70, 167, 88, 13, 242, 107, 148, 193, 62, 47, 208, 133, 122, 227, 28, 73, 182, 183, 72, 29, 226, 123, 132, 209, 46, 63, 192, 149, 106, 243, 12, 89, 166, 71, 184, 237, 18, 139, 116, 33, 222, 207, 48, 101, 154, 3, 252, 169, 86, 23, 232, 189, 66, 219, 36, 113, 142, 159, 96, 53, 202, 83, 172, 249, 6, 231, 24, 77, 178, 43, 212, 129, 126, 111, 144, 197, 58, 163, 92, 9, 246, 119, 136, 221, 34, 187, 68, 17, 238, 255, 0, 85, 170, 51, 204, 153, 102, 135, 120, 45, 210, 75, 180, 225, 30, 15, 240, 165, 90, 195, 60, 105, 150, 215, 40, 125, 130, 27, 228, 177, 78, 95, 160, 245, 10, 147, 108, 57, 198, 39, 216, 141, 114, 235, 20, 65, 190, 175, 80, 5, 250, 99, 156, 201]
#sboxBRTL =  [55, 200, 157, 98, 251, 4, 81, 174, 191, 64, 21, 234, 115, 140, 217, 38, 199, 56, 109, 146, 11, 244, 161, 94, 79, 176, 229, 26, 131, 124, 41, 214, 151, 104, 61, 194, 91, 164, 241, 14, 31, 224, 181, 74, 211, 44, 121, 134, 103, 152, 205, 50, 171, 84, 1, 254, 239, 16, 69, 186, 35, 220, 137, 118, 247, 8, 93, 162, 59, 196, 145, 110, 127, 128, 213, 42, 179, 76, 25, 230, 7, 248, 173, 82, 203, 52, 97, 158, 143, 112, 37, 218, 67, 188, 233, 22, 87, 168, 253, 2, 155, 100, 49, 206, 223, 32, 117, 138, 19, 236, 185, 70, 167, 88, 13, 242, 107, 148, 193, 62, 47, 208, 133, 122, 227, 28, 73, 182, 183, 72, 29, 226, 123, 132, 209, 46, 63, 192, 149, 106, 243, 12, 89, 166, 71, 184, 237, 18, 139, 116, 33, 222, 207, 48, 101, 154, 3, 252, 169, 86, 23, 232, 189, 66, 219, 36, 113, 142, 159, 96, 53, 202, 83, 172, 249, 6, 231, 24, 77, 178, 43, 212, 129, 126, 111, 144, 197, 58, 163, 92, 9, 246, 119, 136, 221, 34, 187, 68, 17, 238, 255, 0, 85, 170, 51, 204, 153, 102, 135, 120, 45, 210, 75, 180, 225, 30, 15, 240, 165, 90, 195, 60, 105, 150, 215, 40, 125, 130, 27, 228, 177, 78, 95, 160, 245, 10, 147, 108, 57, 198, 39, 216, 141, 114, 235, 20, 65, 190, 175, 80, 5, 250, 99, 156, 201]

#sboxBRTL =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#sBoxFRTL =  [201, 200, 157, 156, 251, 250, 175, 174, 191, 190, 235, 234, 141, 140, 217, 216, 199, 198, 147, 146, 245, 10, 161, 160, 177, 176, 229, 228, 131, 130, 215, 214, 151, 150, 195, 194, 165, 164, 15, 240, 225, 30, 181, 180, 211, 210, 135, 134, 153, 152, 205, 204, 171, 170, 255, 0, 17, 238, 187, 186, 221, 34, 137, 136, 9, 246, 163, 162, 197, 58, 145, 144, 129, 128, 43, 212, 179, 178, 231, 24, 249, 6, 173, 172, 53, 202, 159, 158, 143, 142, 219, 36, 189, 66, 23, 232, 169, 86, 3, 252, 155, 154, 207, 48, 33, 222, 139, 138, 237, 18, 71, 184, 89, 166, 243, 12, 149, 106, 63, 192, 209, 46, 133, 132, 29, 226, 183, 72, 73, 182, 227, 28, 123, 122, 47, 208, 193, 62, 107, 148, 13, 242, 167, 88, 185, 70, 19, 236, 139, 116, 223, 32, 49, 206, 101, 100, 253, 2, 87, 168, 233, 22, 67, 188, 37, 218, 113, 142, 159, 96, 203, 52, 83, 82, 7, 248, 25, 230, 77, 76, 213, 42, 129, 126, 111, 144, 59, 196, 163, 92, 247, 8, 119, 136, 35, 220, 187, 68, 239, 16, 1, 254, 85, 170, 51, 50, 153, 102, 135, 120, 45, 44, 75, 180, 31, 224, 241, 14, 165, 90, 195, 60, 105, 150, 215, 40, 125, 130, 27, 26, 177, 78, 95, 160, 11, 244, 147, 108, 57, 198, 39, 216, 141, 114, 235, 20, 65, 190, 175, 80, 5, 4, 99, 156, 201, 54]


#sBoxBRTL =  [201, 200, 157, 156, 251, 250, 175, 174, 191, 190, 235, 234, 141, 140, 217, 216, 199, 198, 147, 146, 245, 10, 161, 160, 177, 176, 229, 228, 131, 130, 215, 214, 151, 150, 195, 194, 165, 164, 15, 240, 225, 30, 181, 180, 211, 210, 135, 134, 153, 152, 205, 204, 171, 170, 255, 0, 17, 238, 187, 186, 221, 34, 137, 136, 9, 246, 163, 162, 197, 58, 145, 144, 129, 128, 43, 212, 179, 178, 231, 24, 249, 6, 173, 172, 53, 202, 159, 158, 143, 142, 219, 36, 189, 66, 23, 232, 169, 86, 3, 252, 155, 154, 207, 48, 33, 222, 139, 138, 237, 18, 71, 184, 89, 166, 243, 12, 149, 106, 63, 192, 209, 46, 133, 132, 29, 226, 183, 72, 73, 182, 227, 28, 123, 122, 47, 208, 193, 62, 107, 148, 13, 242, 167, 88, 185, 70, 19, 236, 139, 116, 223, 32, 49, 206, 101, 100, 253, 2, 87, 168, 233, 22, 67, 188, 37, 218, 113, 142, 159, 96, 203, 52, 83, 82, 7, 248, 25, 230, 77, 76, 213, 42, 129, 126, 111, 144, 59, 196, 163, 92, 247, 8, 119, 136, 35, 220, 187, 68, 239, 16, 1, 254, 85, 170, 51, 50, 153, 102, 135, 120, 45, 44, 75, 180, 31, 224, 241, 14, 165, 90, 195, 60, 105, 150, 215, 40, 125, 130, 27, 26, 177, 78, 95, 160, 11, 244, 147, 108, 57, 198, 39, 216, 141, 114, 235, 20, 65, 190, 175, 80, 5, 4, 99, 156, 201, 54]

sBoxFRTL = [0x37,
0xc8,
0x9d,
0x62,
0xfb,
0x04,
0x51,
0xae,
0xbf,
0x40,
0x15,
0xea,
0x73,
0x8c,
0xd9,
0x26,
0xc7,
0x38,
0x6d,
0x92,
0x0b,
0xf4,
0xa1,
0x5e,
0x4f,
0xb0,
0xe5,
0x1a,
0x83,
0x7c,
0x29,
0xd6,
0x97,
0x68,
0x3d,
0xc2,
0x5b,
0xa4,
0xf1,
0x0e,
0x1f,
0xe0,
0xb5,
0x4a,
0xd3,
0x2c,
0x79,
0x86,
0x67,
0x98,
0xcd,
0x32,
0xab,
0x54,
0x01,
0xfe,
0xef,
0x10,
0x45,
0xba,
0x23,
0xdc,
0x89,
0x76,
0xf7,
0x08,
0x5d,
0xa2,
0x3b,
0xc4,
0x91,
0x6e,
0x7f,
0x80,
0xd5,
0x2a,
0xb3,
0x4c,
0x19,
0xe6,
0x07,
0xf8,
0xad,
0x52,
0xcb,
0x34,
0x61,
0x9e,
0x8f,
0x70,
0x25,
0xda,
0x43,
0xbc,
0xe9,
0x16,
0x57,
0xa8,
0xfd,
0x02,
0x9b,
0x64,
0x31,
0xce,
0xdf,
0x20,
0x75,
0x8a,
0x13,
0xec,
0xb9,
0x46,
0xa7,
0x58,
0x0d,
0xf2,
0x6b,
0x94,
0xc1,
0x3e,
0x2f,
0xd0,
0x85,
0x7a,
0xe3,
0x1c,
0x49,
0xb6,
0xb7,
0x48,
0x1d,
0xe2,
0x7b,
0x84,
0xd1,
0x2e,
0x3f,
0xc0,
0x95,
0x6a,
0xf3,
0x0c,
0x59,
0xa6,
0x47,
0xb8,
0xed,
0x12,
0x8b,
0x74,
0x21,
0xde,
0xcf,
0x30,
0x65,
0x9a,
0x03,
0xfc,
0xa9,
0x56,
0x17,
0xe8,
0xbd,
0x42,
0xdb,
0x24,
0x71,
0x8e,
0x9f,
0x60,
0x35,
0xca,
0x53,
0xac,
0xf9,
0x06,
0xe7,
0x18,
0x4d,
0xb2,
0x2b,
0xd4,
0x81,
0x7e,
0x6f,
0x90,
0xc5,
0x3a,
0xa3,
0x5c,
0x09,
0xf6,
0x77,
0x88,
0xdd,
0x22,
0xbb,
0x44,
0x11,
0xee,
0xff,
0x00,
0x55,
0xaa,
0x33,
0xcc,
0x99,
0x66,
0x87,
0x78,
0x2d,
0xd2,
0x4b,
0xb4,
0xe1,
0x1e,
0x0f,
0xf0,
0xa5,
0x5a,
0xc3,
0x3c,
0x69,
0x96,
0xd7,
0x28,
0x7d,
0x82,
0x1b,
0xe4,
0xb1,
0x4e,
0x5f,
0xa0,
0xf5,
0x0a,
0x93,
0x6c,
0x39,
0xc6,
0x27,
0xd8,
0x8d,
0x72,
0xeb,
0x14,
0x41,
0xbe,
0xaf,
0x50,
0x05,
0xfa,
0x63,
0x9c,
0xc9,
0x36]

sBoxBRTL = [0x37,
0xc8,
0x9d,
0x62,
0xfb,
0x04,
0x51,
0xae,
0xbf,
0x40,
0x15,
0xea,
0x73,
0x8c,
0xd9,
0x26,
0xc7,
0x38,
0x6d,
0x92,
0x0b,
0xf4,
0xa1,
0x5e,
0x4f,
0xb0,
0xe5,
0x1a,
0x83,
0x7c,
0x29,
0xd6,
0x97,
0x68,
0x3d,
0xc2,
0x5b,
0xa4,
0xf1,
0x0e,
0x1f,
0xe0,
0xb5,
0x4a,
0xd3,
0x2c,
0x79,
0x86,
0x67,
0x98,
0xcd,
0x32,
0xab,
0x54,
0x01,
0xfe,
0xef,
0x10,
0x45,
0xba,
0x23,
0xdc,
0x89,
0x76,
0xf7,
0x08,
0x5d,
0xa2,
0x3b,
0xc4,
0x91,
0x6e,
0x7f,
0x80,
0xd5,
0x2a,
0xb3,
0x4c,
0x19,
0xe6,
0x07,
0xf8,
0xad,
0x52,
0xcb,
0x34,
0x61,
0x9e,
0x8f,
0x70,
0x25,
0xda,
0x43,
0xbc,
0xe9,
0x16,
0x57,
0xa8,
0xfd,
0x02,
0x9b,
0x64,
0x31,
0xce,
0xdf,
0x20,
0x75,
0x8a,
0x13,
0xec,
0xb9,
0x46,
0xa7,
0x58,
0x0d,
0xf2,
0x6b,
0x94,
0xc1,
0x3e,
0x2f,
0xd0,
0x85,
0x7a,
0xe3,
0x1c,
0x49,
0xb6,
0xb7,
0x48,
0x1d,
0xe2,
0x7b,
0x84,
0xd1,
0x2e,
0x3f,
0xc0,
0x95,
0x6a,
0xf3,
0x0c,
0x59,
0xa6,
0x47,
0xb8,
0xed,
0x12,
0x8b,
0x74,
0x21,
0xde,
0xcf,
0x30,
0x65,
0x9a,
0x03,
0xfc,
0xa9,
0x56,
0x17,
0xe8,
0xbd,
0x42,
0xdb,
0x24,
0x71,
0x8e,
0x9f,
0x60,
0x35,
0xca,
0x53,
0xac,
0xf9,
0x06,
0xe7,
0x18,
0x4d,
0xb2,
0x2b,
0xd4,
0x81,
0x7e,
0x6f,
0x90,
0xc5,
0x3a,
0xa3,
0x5c,
0x09,
0xf6,
0x77,
0x88,
0xdd,
0x22,
0xbb,
0x44,
0x11,
0xee,
0xff,
0x00,
0x55,
0xaa,
0x33,
0xcc,
0x99,
0x66,
0x87,
0x78,
0x2d,
0xd2,
0x4b,
0xb4,
0xe1,
0x1e,
0x0f,
0xf0,
0xa5,
0x5a,
0xc3,
0x3c,
0x69,
0x96,
0xd7,
0x28,
0x7d,
0x82,
0x1b,
0xe4,
0xb1,
0x4e,
0x5f,
0xa0,
0xf5,
0x0a,
0x93,
0x6c,
0x39,
0xc6,
0x27,
0xd8,
0x8d,
0x72,
0xeb,
0x14,
0x41,
0xbe,
0xaf,
0x50,
0x05,
0xfa,
0x63,
0x9c,
0xc9,
0x36]

#   Bahram 2021 SBox Entropy h =  7.6739952595684615
bahram_2021_sbox = [
    0x82, 0x13, 0x9f, 0x6b, 0xd9, 0xbc, 0x76, 0xe7, 0xfa, 0xa1, 0x48, 0x55, 0x2d, 0xc4, 0x30, 0x0e,
    0x7d, 0x05, 0x7e, 0xcc, 0xa3, 0x2f, 0x59, 0x7a, 0xaf, 0x00, 0x75, 0xbf, 0x35, 0xe2, 0xfb, 0xbd,
    0xf5, 0x16, 0x1c, 0xc1, 0x74, 0xc9, 0xf8, 0xac, 0x12, 0x3a, 0x54, 0x04, 0x6f, 0xc8, 0xfe, 0xeb,
    0x28, 0xc3, 0x98, 0xff, 0x5d, 0xb8, 0x29, 0xef, 0x03, 0x43, 0x3b, 0x66, 0x6d, 0x49, 0x0f, 0x70,
    0x39, 0x56, 0x95, 0x1f, 0xcd, 0x9c, 0xab, 0x3c, 0x2c, 0x72, 0xf2, 0xfc, 0x6a, 0xe3, 0x40, 0xe1,
    0x1b, 0x09, 0xb5, 0xb2, 0x52, 0xa9, 0x1d, 0x41, 0xa4, 0xc0, 0x8d, 0x02, 0x51, 0x73, 0x21, 0x64,
    0x5f, 0x3f, 0xaa, 0x97, 0xd2, 0x25, 0x61, 0xd6, 0xe5, 0x67, 0xc2, 0xfd, 0xdf, 0xa6, 0x69, 0x44,
    0xa0, 0x0d, 0xde, 0x90, 0x79, 0x85, 0xc7, 0xe6, 0x0b, 0x8c, 0x15, 0xed, 0xd3, 0x08, 0x23, 0xdc,
    0xd7, 0xa7, 0x3d, 0xd5, 0x81, 0xe0, 0x4c, 0x32, 0x78, 0xba, 0x58, 0xf6, 0x4b, 0xbb, 0xdd, 0xbe,
    0x6c, 0x7b, 0xd1, 0x9e, 0x62, 0x7c, 0x46, 0xdb, 0x1e, 0x37, 0xd8, 0x63, 0x42, 0x96, 0x57, 0xe9,
    0xc6, 0x2b, 0xcf, 0x19, 0x91, 0x17, 0x9a, 0xd0, 0xb7, 0x27, 0x4a, 0x36, 0x4d, 0x24, 0x3e, 0x86,
    0xb1, 0x47, 0x99, 0x07, 0x65, 0x26, 0x8e, 0xc5, 0xf3, 0x84, 0xae, 0xd4, 0x83, 0xad, 0x5e, 0xca,
    0xe4, 0xa5, 0x5c, 0x31, 0xcb, 0x60, 0x80, 0x2a, 0x22, 0x18, 0x0c, 0x71, 0x2e, 0x34, 0xa8, 0x77,
    0x4e, 0x8f, 0xeb, 0x1a, 0x10, 0x9d, 0xb9, 0x38, 0x11, 0xda, 0x8a, 0x6e, 0xea, 0x53, 0xee, 0x01,
    0x93, 0x50, 0x45, 0xce, 0xf1, 0x68, 0x8b, 0x14, 0x7f, 0x4f, 0x89, 0xa2, 0x20, 0xf0, 0xb0, 0x87,
    0x0a, 0xec, 0xb6, 0xf4, 0xb4, 0x92, 0xf9, 0x5a, 0xb3, 0x33, 0xf7, 0x06, 0x5b, 0x88, 0x94, 0x9b
]

bahram_2021_inv_sbox = [
    0x82, 0x13, 0x9f, 0x6b, 0xd9, 0xbc, 0x76, 0xe7, 0xfa, 0xa1, 0x48, 0x55, 0x2d, 0xc4, 0x30, 0x0e,
    0x7d, 0x05, 0x7e, 0xcc, 0xa3, 0x2f, 0x59, 0x7a, 0xaf, 0x00, 0x75, 0xbf, 0x35, 0xe2, 0xfb, 0xbd,
    0xf5, 0x16, 0x1c, 0xc1, 0x74, 0xc9, 0xf8, 0xac, 0x12, 0x3a, 0x54, 0x04, 0x6f, 0xc8, 0xfe, 0xeb,
    0x28, 0xc3, 0x98, 0xff, 0x5d, 0xb8, 0x29, 0xef, 0x03, 0x43, 0x3b, 0x66, 0x6d, 0x49, 0x0f, 0x70,
    0x39, 0x56, 0x95, 0x1f, 0xcd, 0x9c, 0xab, 0x3c, 0x2c, 0x72, 0xf2, 0xfc, 0x6a, 0xe3, 0x40, 0xe1,
    0x1b, 0x09, 0xb5, 0xb2, 0x52, 0xa9, 0x1d, 0x41, 0xa4, 0xc0, 0x8d, 0x02, 0x51, 0x73, 0x21, 0x64,
    0x5f, 0x3f, 0xaa, 0x97, 0xd2, 0x25, 0x61, 0xd6, 0xe5, 0x67, 0xc2, 0xfd, 0xdf, 0xa6, 0x69, 0x44,
    0xa0, 0x0d, 0xde, 0x90, 0x79, 0x85, 0xc7, 0xe6, 0x0b, 0x8c, 0x15, 0xed, 0xd3, 0x08, 0x23, 0xdc,
    0xd7, 0xa7, 0x3d, 0xd5, 0x81, 0xe0, 0x4c, 0x32, 0x78, 0xba, 0x58, 0xf6, 0x4b, 0xbb, 0xdd, 0xbe,
    0x6c, 0x7b, 0xd1, 0x9e, 0x62, 0x7c, 0x46, 0xdb, 0x1e, 0x37, 0xd8, 0x63, 0x42, 0x96, 0x57, 0xe9,
    0xc6, 0x2b, 0xcf, 0x19, 0x91, 0x17, 0x9a, 0xd0, 0xb7, 0x27, 0x4a, 0x36, 0x4d, 0x24, 0x3e, 0x86,
    0xb1, 0x47, 0x99, 0x07, 0x65, 0x26, 0x8e, 0xc5, 0xf3, 0x84, 0xae, 0xd4, 0x83, 0xad, 0x5e, 0xca,
    0xe4, 0xa5, 0x5c, 0x31, 0xcb, 0x60, 0x80, 0x2a, 0x22, 0x18, 0x0c, 0x71, 0x2e, 0x34, 0xa8, 0x77,
    0x4e, 0x8f, 0xeb, 0x1a, 0x10, 0x9d, 0xb9, 0x38, 0x11, 0xda, 0x8a, 0x6e, 0xea, 0x53, 0xee, 0x01,
    0x93, 0x50, 0x45, 0xce, 0xf1, 0x68, 0x8b, 0x14, 0x7f, 0x4f, 0x89, 0xa2, 0x20, 0xf0, 0xb0, 0x87,
    0x0a, 0xec, 0xb6, 0xf4, 0xb4, 0x92, 0xf9, 0x5a, 0xb3, 0x33, 0xf7, 0x06, 0x5b, 0x88, 0x94, 0x9b
]


sboxForward = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
]

sboxBackward = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
]


#
''' 18 . New Entropy  <  Best Entropy =  =  7.64507122088452  <  7.659934382909035
Found Better SBOX  with h =  7.672874188331203  Against Previous h =  7.672874188331203  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [175, 0, 88, 102, 103, 70, 231, 137, 171, 181, 92, 142, 20, 187, 158, 41, 99, 145, 8, 163, 9, 199, 11, 150, 87, 101, 202, 96, 243, 165, 180, 174, 218, 14, 129, 212, 140, 16, 108, 215, 222, 21, 207, 118, 235, 60, 206, 43, 85, 154, 30, 36, 76, 155, 192, 178, 236, 97, 211, 37, 89, 173, 32, 22, 237, 124, 58, 123, 162, 153, 63, 182, 132, 106, 114, 193, 26, 115, 208, 224, 71, 143, 17, 27, 12, 172, 23, 232, 209, 141, 216, 25, 248, 94, 74, 127, 107, 189, 2, 204, 245, 252, 7, 247, 116, 10, 109, 197, 196, 147, 230, 240, 29, 238, 119, 253, 120, 146, 227, 134, 79, 126, 31, 83, 217, 223, 3, 213, 62, 15, 98, 44, 151, 56, 50, 239, 254, 250, 125, 220, 19, 249, 55, 121, 95, 40, 110, 176, 194, 179, 117, 75, 226, 135, 24, 219, 67, 68, 47, 90, 130, 161, 65, 73, 42, 138, 229, 195, 159, 57, 186, 48, 28, 144, 51, 133, 54, 234, 93, 139, 169, 152, 5, 81, 228, 167, 39, 72, 80, 77, 91, 6, 185, 190, 45, 251, 105, 170, 53, 69, 157, 201, 177, 128, 203, 160, 233, 46, 86, 82, 164, 244, 104, 184, 242, 113, 112, 131, 18, 4, 156, 255, 100, 205, 241, 66, 122, 35, 191, 34, 33, 183, 136, 221, 1, 210, 61, 78, 148, 59, 38, 198, 166, 49, 149, 84, 225, 168, 200, 111, 246, 188, 13, 64, 214, 52]
Invserse sbox =  [1, 234, 98, 126, 219, 182, 191, 102, 18, 20, 105, 22, 84, 252, 33, 129, 37, 82, 218, 140, 12, 41, 63, 86, 154, 91, 76, 83, 172, 112, 50, 122, 62, 230, 229, 227, 51, 59, 240, 186, 145, 15, 164, 47, 131, 194, 207, 158, 171, 243, 134, 174, 255, 198, 176, 142, 133, 169, 66, 239, 45, 236, 128, 70, 253, 162, 225, 156, 157, 199, 5, 80, 187, 163, 94, 151, 52, 189, 237, 120, 188, 183, 209, 123, 245, 48, 208, 24, 2, 60, 159, 190, 10, 178, 93, 144, 27, 57, 130, 16, 222, 25, 3, 4, 212, 196, 73, 96, 38, 106, 146, 249, 216, 215, 74, 77, 104, 150, 43, 114, 116, 143, 226, 67, 65, 138, 121, 95, 203, 34, 160, 217, 72, 175, 119, 153, 232, 7, 165, 179, 36, 89, 11, 81, 173, 17, 117, 109, 238, 244, 23, 132, 181, 69, 49, 53, 220, 200, 14, 168, 205, 161, 68, 19, 210, 29, 242, 185, 247, 180, 197, 8, 85, 61, 31, 0, 147, 202, 55, 149, 30, 9, 71, 231, 213, 192, 170, 13, 251, 97, 193, 228, 54, 75, 148, 167, 108, 107, 241, 21, 248, 201, 26, 204, 99, 223, 46, 42, 78, 88, 235, 58, 35, 127, 254, 39, 90, 124, 32, 155, 139, 233, 40, 125, 79, 246, 152, 118, 184, 166, 110, 6, 87, 206, 177, 44, 56, 64, 113, 135, 111, 224, 214, 28, 211, 100, 250, 103, 92, 141, 137, 195, 101, 115, 136, 221]
Final Generated SBOX PAIRS : 
sbox1F =  [12, 1, 15, 9, 2, 5, 4, 6, 7, 13, 10, 0, 14, 11, 3, 8]
sbox1B =  [11, 1, 4, 14, 6, 5, 7, 8, 15, 3, 10, 13, 0, 9, 12, 2]
sbox2F =  [0, 2, 10, 6, 8, 9, 1, 15, 4, 12, 13, 11, 14, 5, 7, 3]
sbox2B =  [0, 6, 1, 15, 8, 13, 3, 14, 4, 5, 2, 11, 9, 10, 12, 7]
Final SBOX  with h =  7.672874188331203  Against Previous h =  7.672874188331203  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [175, 0, 88, 102, 103, 70, 231, 137, 171, 181, 92, 142, 20, 187, 158, 41, 99, 145, 8, 163, 9, 199, 11, 150, 87, 101, 202, 96, 243, 165, 180, 174, 218, 14, 129, 212, 140, 16, 108, 215, 222, 21, 207, 118, 235, 60, 206, 43, 85, 154, 30, 36, 76, 155, 192, 178, 236, 97, 211, 37, 89, 173, 32, 22, 237, 124, 58, 123, 162, 153, 63, 182, 132, 106, 114, 193, 26, 115, 208, 224, 71, 143, 17, 27, 12, 172, 23, 232, 209, 141, 216, 25, 248, 94, 74, 127, 107, 189, 2, 204, 245, 252, 7, 247, 116, 10, 109, 197, 196, 147, 230, 240, 29, 238, 119, 253, 120, 146, 227, 134, 79, 126, 31, 83, 217, 223, 3, 213, 62, 15, 98, 44, 151, 56, 50, 239, 254, 250, 125, 220, 19, 249, 55, 121, 95, 40, 110, 176, 194, 179, 117, 75, 226, 135, 24, 219, 67, 68, 47, 90, 130, 161, 65, 73, 42, 138, 229, 195, 159, 57, 186, 48, 28, 144, 51, 133, 54, 234, 93, 139, 169, 152, 5, 81, 228, 167, 39, 72, 80, 77, 91, 6, 185, 190, 45, 251, 105, 170, 53, 69, 157, 201, 177, 128, 203, 160, 233, 46, 86, 82, 164, 244, 104, 184, 242, 113, 112, 131, 18, 4, 156, 255, 100, 205, 241, 66, 122, 35, 191, 34, 33, 183, 136, 221, 1, 210, 61, 78, 148, 59, 38, 198, 166, 49, 149, 84, 225, 168, 200, 111, 246, 188, 13, 64, 214, 52]
Invserse sbox =  [1, 234, 98, 126, 219, 182, 191, 102, 18, 20, 105, 22, 84, 252, 33, 129, 37, 82, 218, 140, 12, 41, 63, 86, 154, 91, 76, 83, 172, 112, 50, 122, 62, 230, 229, 227, 51, 59, 240, 186, 145, 15, 164, 47, 131, 194, 207, 158, 171, 243, 134, 174, 255, 198, 176, 142, 133, 169, 66, 239, 45, 236, 128, 70, 253, 162, 225, 156, 157, 199, 5, 80, 187, 163, 94, 151, 52, 189, 237, 120, 188, 183, 209, 123, 245, 48, 208, 24, 2, 60, 159, 190, 10, 178, 93, 144, 27, 57, 130, 16, 222, 25, 3, 4, 212, 196, 73, 96, 38, 106, 146, 249, 216, 215, 74, 77, 104, 150, 43, 114, 116, 143, 226, 67, 65, 138, 121, 95, 203, 34, 160, 217, 72, 175, 119, 153, 232, 7, 165, 179, 36, 89, 11, 81, 173, 17, 117, 109, 238, 244, 23, 132, 181, 69, 49, 53, 220, 200, 14, 168, 205, 161, 68, 19, 210, 29, 242, 185, 247, 180, 197, 8, 85, 61, 31, 0, 147, 202, 55, 149, 30, 9, 71, 231, 213, 192, 170, 13, 251, 97, 193, 228, 54, 75, 148, 167, 108, 107, 241, 21, 248, 201, 26, 204, 99, 223, 46, 42, 78, 88, 235, 58, 35, 127, 254, 39, 90, 124, 32, 155, 139, 233, 40, 125, 79, 246, 152, 118, 184, 166, 110, 6, 87, 206, 177, 44, 56, 64, 113, 135, 111, 224, 214, 28, 211, 100, 250, 103, 92, 141, 137, 195, 101, 115, 136, 221]
Generate Secure Sbox Program is Ended Successfully !!! '''



''' 52 . New Entropy  <  Best Entropy =  =  7.624085146581514  <  7.6739952595684615
Found Better SBOX  with h =  7.678207126411003  Against Previous h =  7.678207126411003  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [161, 150, 140, 72, 135, 92, 47, 24, 154, 71, 132, 129, 151, 168, 44, 53, 187, 13, 26, 51, 17, 78, 233, 250, 171, 7, 109, 84, 125, 186, 38, 143, 77, 195, 249, 142, 218, 146, 20, 1, 127, 68, 19, 115, 194, 85, 241, 96, 33, 74, 145, 130, 56, 18, 21, 94, 235, 134, 100, 182, 3, 210, 35, 70, 121, 101, 196, 93, 110, 95, 169, 198, 148, 29, 232, 8, 191, 40, 239, 170, 120, 50, 87, 213, 98, 197, 27, 243, 43, 5, 156, 49, 6, 128, 66, 137, 208, 102, 22, 61, 104, 16, 4, 75, 155, 247, 34, 42, 80, 174, 178, 111, 52, 221, 192, 114, 207, 177, 238, 200, 103, 252, 41, 58, 224, 99, 173, 119, 236, 244, 190, 209, 179, 82, 163, 63, 225, 248, 189, 97, 164, 184, 167, 183, 113, 226, 162, 147, 67, 201, 139, 83, 10, 45, 242, 181, 116, 106, 9, 122, 23, 166, 138, 228, 204, 216, 73, 202, 79, 88, 30, 107, 212, 160, 158, 62, 28, 215, 220, 251, 37, 153, 144, 136, 0, 118, 48, 69, 222, 175, 229, 15, 219, 11, 214, 223, 206, 14, 86, 105, 131, 54, 2, 89, 188, 231, 31, 176, 246, 117, 253, 254, 81, 60, 165, 55, 152, 217, 234, 199, 32, 240, 36, 211, 90, 193, 57, 123, 227, 203, 39, 76, 12, 108, 205, 255, 141, 126, 91, 64, 185, 245, 237, 159, 65, 180, 172, 59, 230, 112, 124, 157, 25, 133, 46, 149]
Invserse sbox =  [184, 39, 202, 60, 102, 89, 92, 25, 75, 158, 152, 193, 232, 17, 197, 191, 101, 20, 53, 42, 38, 54, 98, 160, 7, 252, 18, 86, 176, 73, 170, 206, 220, 48, 106, 62, 222, 180, 30, 230, 77, 122, 107, 88, 14, 153, 254, 6, 186, 91, 81, 19, 112, 15, 201, 215, 52, 226, 123, 247, 213, 99, 175, 135, 239, 244, 94, 148, 41, 187, 63, 9, 3, 166, 49, 103, 231, 32, 21, 168, 108, 212, 133, 151, 27, 45, 198, 82, 169, 203, 224, 238, 5, 67, 55, 69, 47, 139, 84, 125, 58, 65, 97, 120, 100, 199, 157, 171, 233, 26, 68, 111, 249, 144, 115, 43, 156, 209, 185, 127, 80, 64, 159, 227, 250, 28, 237, 40, 93, 11, 51, 200, 10, 253, 57, 4, 183, 95, 162, 150, 2, 236, 35, 31, 182, 50, 37, 147, 72, 255, 1, 12, 216, 181, 8, 104, 90, 251, 174, 243, 173, 0, 146, 134, 140, 214, 161, 142, 13, 70, 79, 24, 246, 126, 109, 189, 207, 117, 110, 132, 245, 155, 59, 143, 141, 240, 29, 16, 204, 138, 130, 76, 114, 225, 44, 33, 66, 85, 71, 219, 119, 149, 167, 229, 164, 234, 196, 116, 96, 131, 61, 223, 172, 83, 194, 177, 165, 217, 36, 192, 178, 113, 188, 195, 124, 136, 145, 228, 163, 190, 248, 205, 74, 22, 218, 56, 128, 242, 118, 78, 221, 46, 154, 87, 129, 241, 208, 105, 137, 34, 23, 179, 121, 210, 211, 235]
Final Generated SBOX PAIRS : 
sbox1F =  [1, 11, 9, 5, 3, 15, 14, 12, 0, 4, 7, 6, 2, 13, 10, 8]
sbox1B =  [8, 0, 12, 4, 9, 3, 11, 10, 15, 2, 14, 1, 7, 13, 6, 5]
sbox2F =  [1, 11, 2, 12, 7, 5, 10, 15, 14, 3, 8, 9, 13, 6, 4, 0]
sbox2B =  [15, 0, 2, 9, 14, 5, 13, 4, 10, 11, 6, 1, 3, 12, 8, 7]
Final SBOX  with h =  7.678207126411003  Against Previous h =  7.678207126411003  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [161, 150, 140, 72, 135, 92, 47, 24, 154, 71, 132, 129, 151, 168, 44, 53, 187, 13, 26, 51, 17, 78, 233, 250, 171, 7, 109, 84, 125, 186, 38, 143, 77, 195, 249, 142, 218, 146, 20, 1, 127, 68, 19, 115, 194, 85, 241, 96, 33, 74, 145, 130, 56, 18, 21, 94, 235, 134, 100, 182, 3, 210, 35, 70, 121, 101, 196, 93, 110, 95, 169, 198, 148, 29, 232, 8, 191, 40, 239, 170, 120, 50, 87, 213, 98, 197, 27, 243, 43, 5, 156, 49, 6, 128, 66, 137, 208, 102, 22, 61, 104, 16, 4, 75, 155, 247, 34, 42, 80, 174, 178, 111, 52, 221, 192, 114, 207, 177, 238, 200, 103, 252, 41, 58, 224, 99, 173, 119, 236, 244, 190, 209, 179, 82, 163, 63, 225, 248, 189, 97, 164, 184, 167, 183, 113, 226, 162, 147, 67, 201, 139, 83, 10, 45, 242, 181, 116, 106, 9, 122, 23, 166, 138, 228, 204, 216, 73, 202, 79, 88, 30, 107, 212, 160, 158, 62, 28, 215, 220, 251, 37, 153, 144, 136, 0, 118, 48, 69, 222, 175, 229, 15, 219, 11, 214, 223, 206, 14, 86, 105, 131, 54, 2, 89, 188, 231, 31, 176, 246, 117, 253, 254, 81, 60, 165, 55, 152, 217, 234, 199, 32, 240, 36, 211, 90, 193, 57, 123, 227, 203, 39, 76, 12, 108, 205, 255, 141, 126, 91, 64, 185, 245, 237, 159, 65, 180, 172, 59, 230, 112, 124, 157, 25, 133, 46, 149]
Invserse sbox =  [184, 39, 202, 60, 102, 89, 92, 25, 75, 158, 152, 193, 232, 17, 197, 191, 101, 20, 53, 42, 38, 54, 98, 160, 7, 252, 18, 86, 176, 73, 170, 206, 220, 48, 106, 62, 222, 180, 30, 230, 77, 122, 107, 88, 14, 153, 254, 6, 186, 91, 81, 19, 112, 15, 201, 215, 52, 226, 123, 247, 213, 99, 175, 135, 239, 244, 94, 148, 41, 187, 63, 9, 3, 166, 49, 103, 231, 32, 21, 168, 108, 212, 133, 151, 27, 45, 198, 82, 169, 203, 224, 238, 5, 67, 55, 69, 47, 139, 84, 125, 58, 65, 97, 120, 100, 199, 157, 171, 233, 26, 68, 111, 249, 144, 115, 43, 156, 209, 185, 127, 80, 64, 159, 227, 250, 28, 237, 40, 93, 11, 51, 200, 10, 253, 57, 4, 183, 95, 162, 150, 2, 236, 35, 31, 182, 50, 37, 147, 72, 255, 1, 12, 216, 181, 8, 104, 90, 251, 174, 243, 173, 0, 146, 134, 140, 214, 161, 142, 13, 70, 79, 24, 246, 126, 109, 189, 207, 117, 110, 132, 245, 155, 59, 143, 141, 240, 29, 16, 204, 138, 130, 76, 114, 225, 44, 33, 66, 85, 71, 219, 119, 149, 167, 229, 164, 234, 196, 116, 96, 131, 61, 223, 172, 83, 194, 177, 165, 217, 36, 192, 178, 113, 188, 195, 124, 136, 145, 228, 163, 190, 248, 205, 74, 22, 218, 56, 128, 242, 118, 78, 221, 46, 154, 87, 129, 241, 208, 105, 137, 34, 23, 179, 121, 210, 211, 235]
Generate Secure Sbox Program is Ended Successfully !!! '''


''' ..............Iteration no  460 ............Best Entropy =  7.678207126411003  .......
460 . New Entropy  <  Best Entropy =  =  7.631502802886209  <  7.678207126411003
Found Better SBOX  with h =  7.6827305795682  Against Previous h =  7.6827305795682  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [21, 224, 72, 144, 164, 26, 168, 82, 94, 143, 71, 40, 179, 53, 154, 225, 63, 211, 202, 91, 51, 33, 198, 90, 229, 230, 92, 220, 65, 222, 227, 99, 89, 195, 248, 180, 213, 9, 60, 19, 214, 190, 134, 210, 120, 145, 191, 181, 101, 131, 125, 197, 77, 79, 174, 185, 236, 45, 151, 103, 42, 226, 129, 205, 240, 23, 75, 200, 5, 252, 239, 28, 217, 31, 57, 186, 86, 70, 147, 167, 17, 127, 199, 18, 159, 43, 1, 155, 12, 237, 158, 243, 39, 255, 247, 173, 215, 221, 194, 206, 76, 251, 36, 172, 47, 246, 113, 107, 35, 6, 182, 135, 4, 84, 189, 109, 218, 0, 171, 88, 14, 11, 61, 2, 87, 52, 62, 126, 78, 162, 123, 208, 83, 169, 27, 64, 49, 74, 146, 242, 153, 241, 13, 34, 183, 10, 25, 93, 110, 22, 96, 58, 187, 150, 254, 30, 141, 149, 212, 122, 44, 136, 37, 203, 119, 111, 188, 59, 207, 85, 228, 104, 166, 209, 105, 108, 38, 219, 80, 8, 238, 100, 235, 157, 233, 176, 170, 138, 46, 121, 204, 152, 73, 165, 245, 114, 15, 55, 175, 223, 106, 7, 66, 139, 16, 156, 249, 98, 124, 115, 56, 81, 3, 54, 68, 163, 132, 20, 193, 253, 133, 184, 117, 29, 178, 112, 95, 69, 140, 148, 116, 97, 24, 201, 102, 32, 177, 232, 244, 48, 128, 250, 231, 137, 41, 50, 142, 216, 118, 192, 130, 160, 234, 196, 67, 161]
Invserse sbox =  [117, 86, 123, 212, 112, 68, 109, 201, 179, 37, 145, 121, 88, 142, 120, 196, 204, 80, 83, 39, 217, 0, 149, 65, 232, 146, 5, 134, 71, 223, 155, 73, 235, 21, 143, 108, 102, 162, 176, 92, 11, 244, 60, 85, 160, 57, 188, 104, 239, 136, 245, 20, 125, 13, 213, 197, 210, 74, 151, 167, 38, 122, 126, 16, 135, 28, 202, 254, 214, 227, 77, 10, 2, 192, 137, 66, 100, 52, 128, 53, 178, 211, 7, 132, 113, 169, 76, 124, 119, 32, 23, 19, 26, 147, 8, 226, 150, 231, 207, 31, 181, 48, 234, 59, 171, 174, 200, 107, 175, 115, 148, 165, 225, 106, 195, 209, 230, 222, 248, 164, 44, 189, 159, 130, 208, 50, 127, 81, 240, 62, 250, 49, 216, 220, 42, 111, 161, 243, 187, 203, 228, 156, 246, 9, 3, 45, 138, 78, 229, 157, 153, 58, 191, 140, 14, 87, 205, 183, 90, 84, 251, 255, 129, 215, 4, 193, 172, 79, 6, 133, 186, 118, 103, 95, 54, 198, 185, 236, 224, 12, 35, 47, 110, 144, 221, 55, 75, 152, 166, 114, 41, 46, 249, 218, 98, 33, 253, 51, 22, 82, 67, 233, 18, 163, 190, 63, 99, 168, 131, 173, 43, 17, 158, 36, 40, 96, 247, 72, 116, 177, 27, 97, 29, 199, 1, 15, 61, 30, 170, 24, 25, 242, 237, 184, 252, 182, 56, 89, 180, 70, 64, 141, 139, 91, 238, 194, 105, 94, 34, 206, 241, 101, 69, 219, 154, 93]
Final Generated SBOX PAIRS : 
sbox1F =  [13, 14, 5, 3, 7, 12, 4, 10, 11, 6, 9, 0, 1, 2, 8, 15]
sbox1B =  [11, 12, 13, 3, 6, 2, 9, 4, 14, 10, 7, 8, 5, 0, 1, 15]
sbox2F =  [7, 8, 5, 6, 10, 13, 12, 3, 2, 14, 4, 15, 11, 9, 0, 1]
sbox2B =  [14, 15, 8, 7, 10, 2, 3, 0, 1, 13, 4, 12, 6, 5, 9, 11]
Final SBOX  with h =  7.6827305795682  Against Previous h =  7.6827305795682  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [21, 224, 72, 144, 164, 26, 168, 82, 94, 143, 71, 40, 179, 53, 154, 225, 63, 211, 202, 91, 51, 33, 198, 90, 229, 230, 92, 220, 65, 222, 227, 99, 89, 195, 248, 180, 213, 9, 60, 19, 214, 190, 134, 210, 120, 145, 191, 181, 101, 131, 125, 197, 77, 79, 174, 185, 236, 45, 151, 103, 42, 226, 129, 205, 240, 23, 75, 200, 5, 252, 239, 28, 217, 31, 57, 186, 86, 70, 147, 167, 17, 127, 199, 18, 159, 43, 1, 155, 12, 237, 158, 243, 39, 255, 247, 173, 215, 221, 194, 206, 76, 251, 36, 172, 47, 246, 113, 107, 35, 6, 182, 135, 4, 84, 189, 109, 218, 0, 171, 88, 14, 11, 61, 2, 87, 52, 62, 126, 78, 162, 123, 208, 83, 169, 27, 64, 49, 74, 146, 242, 153, 241, 13, 34, 183, 10, 25, 93, 110, 22, 96, 58, 187, 150, 254, 30, 141, 149, 212, 122, 44, 136, 37, 203, 119, 111, 188, 59, 207, 85, 228, 104, 166, 209, 105, 108, 38, 219, 80, 8, 238, 100, 235, 157, 233, 176, 170, 138, 46, 121, 204, 152, 73, 165, 245, 114, 15, 55, 175, 223, 106, 7, 66, 139, 16, 156, 249, 98, 124, 115, 56, 81, 3, 54, 68, 163, 132, 20, 193, 253, 133, 184, 117, 29, 178, 112, 95, 69, 140, 148, 116, 97, 24, 201, 102, 32, 177, 232, 244, 48, 128, 250, 231, 137, 41, 50, 142, 216, 118, 192, 130, 160, 234, 196, 67, 161]
Invserse sbox =  [117, 86, 123, 212, 112, 68, 109, 201, 179, 37, 145, 121, 88, 142, 120, 196, 204, 80, 83, 39, 217, 0, 149, 65, 232, 146, 5, 134, 71, 223, 155, 73, 235, 21, 143, 108, 102, 162, 176, 92, 11, 244, 60, 85, 160, 57, 188, 104, 239, 136, 245, 20, 125, 13, 213, 197, 210, 74, 151, 167, 38, 122, 126, 16, 135, 28, 202, 254, 214, 227, 77, 10, 2, 192, 137, 66, 100, 52, 128, 53, 178, 211, 7, 132, 113, 169, 76, 124, 119, 32, 23, 19, 26, 147, 8, 226, 150, 231, 207, 31, 181, 48, 234, 59, 171, 174, 200, 107, 175, 115, 148, 165, 225, 106, 195, 209, 230, 222, 248, 164, 44, 189, 159, 130, 208, 50, 127, 81, 240, 62, 250, 49, 216, 220, 42, 111, 161, 243, 187, 203, 228, 156, 246, 9, 3, 45, 138, 78, 229, 157, 153, 58, 191, 140, 14, 87, 205, 183, 90, 84, 251, 255, 129, 215, 4, 193, 172, 79, 6, 133, 186, 118, 103, 95, 54, 198, 185, 236, 224, 12, 35, 47, 110, 144, 221, 55, 75, 152, 166, 114, 41, 46, 249, 218, 98, 33, 253, 51, 22, 82, 67, 233, 18, 163, 190, 63, 99, 168, 131, 173, 43, 17, 158, 36, 40, 96, 247, 72, 116, 177, 27, 97, 29, 199, 1, 15, 61, 30, 170, 24, 25, 242, 237, 184, 252, 182, 56, 89, 180, 70, 64, 141, 139, 91, 238, 194, 105, 94, 34, 206, 241, 101, 69, 219, 154, 93]
Generate Secure Sbox Program is Ended Successfully !!!
Program is Ended Successfully !!!
 '''




#Entropy = h =  7.678207126411003 VS Bahram 2021  h =  7.6739952595684615
prop_sbox_charlie =  [161, 150, 140, 72, 135, 92, 47, 24, 154, 71, 132, 129, 151, 168, 44, 53, 187, 13, 26, 51, 17, 78, 233, 250, 171, 7, 109, 84, 125, 186, 38, 143, 77, 195, 249, 142, 218, 146, 20, 1, 127, 68, 19, 115, 194, 85, 241, 96, 33, 74, 145, 130, 56, 18, 21, 94, 235, 134, 100, 182, 3, 210, 35, 70, 121, 101, 196, 93, 110, 95, 169, 198, 148, 29, 232, 8, 191, 40, 239, 170, 120, 50, 87, 213, 98, 197, 27, 243, 43, 5, 156, 49, 6, 128, 66, 137, 208, 102, 22, 61, 104, 16, 4, 75, 155, 247, 34, 42, 80, 174, 178, 111, 52, 221, 192, 114, 207, 177, 238, 200, 103, 252, 41, 58, 224, 99, 173, 119, 236, 244, 190, 209, 179, 82, 163, 63, 225, 248, 189, 97, 164, 184, 167, 183, 113, 226, 162, 147, 67, 201, 139, 83, 10, 45, 242, 181, 116, 106, 9, 122, 23, 166, 138, 228, 204, 216, 73, 202, 79, 88, 30, 107, 212, 160, 158, 62, 28, 215, 220, 251, 37, 153, 144, 136, 0, 118, 48, 69, 222, 175, 229, 15, 219, 11, 214, 223, 206, 14, 86, 105, 131, 54, 2, 89, 188, 231, 31, 176, 246, 117, 253, 254, 81, 60, 165, 55, 152, 217, 234, 199, 32, 240, 36, 211, 90, 193, 57, 123, 227, 203, 39, 76, 12, 108, 205, 255, 141, 126, 91, 64, 185, 245, 237, 159, 65, 180, 172, 59, 230, 112, 124, 157, 25, 133, 46, 149]
prop_inv_sbox_charlie =  [184, 39, 202, 60, 102, 89, 92, 25, 75, 158, 152, 193, 232, 17, 197, 191, 101, 20, 53, 42, 38, 54, 98, 160, 7, 252, 18, 86, 176, 73, 170, 206, 220, 48, 106, 62, 222, 180, 30, 230, 77, 122, 107, 88, 14, 153, 254, 6, 186, 91, 81, 19, 112, 15, 201, 215, 52, 226, 123, 247, 213, 99, 175, 135, 239, 244, 94, 148, 41, 187, 63, 9, 3, 166, 49, 103, 231, 32, 21, 168, 108, 212, 133, 151, 27, 45, 198, 82, 169, 203, 224, 238, 5, 67, 55, 69, 47, 139, 84, 125, 58, 65, 97, 120, 100, 199, 157, 171, 233, 26, 68, 111, 249, 144, 115, 43, 156, 209, 185, 127, 80, 64, 159, 227, 250, 28, 237, 40, 93, 11, 51, 200, 10, 253, 57, 4, 183, 95, 162, 150, 2, 236, 35, 31, 182, 50, 37, 147, 72, 255, 1, 12, 216, 181, 8, 104, 90, 251, 174, 243, 173, 0, 146, 134, 140, 214, 161, 142, 13, 70, 79, 24, 246, 126, 109, 189, 207, 117, 110, 132, 245, 155, 59, 143, 141, 240, 29, 16, 204, 138, 130, 76, 114, 225, 44, 33, 66, 85, 71, 219, 119, 149, 167, 229, 164, 234, 196, 116, 96, 131, 61, 223, 172, 83, 194, 177, 165, 217, 36, 192, 178, 113, 188, 195, 124, 136, 145, 228, 163, 190, 248, 205, 74, 22, 218, 56, 128, 242, 118, 78, 221, 46, 154, 87, 129, 241, 208, 105, 137, 34, 23, 179, 121, 210, 211, 235]

#Entropy = h  =  7.6827305795682 VS Bahram 2021 h =  7.6739952595684615
prop_sbox_bravo =  [21, 224, 72, 144, 164, 26, 168, 82, 94, 143, 71, 40, 179, 53, 154, 225, 63, 211, 202, 91, 51, 33, 198, 90, 229, 230, 92, 220, 65, 222, 227, 99, 89, 195, 248, 180, 213, 9, 60, 19, 214, 190, 134, 210, 120, 145, 191, 181, 101, 131, 125, 197, 77, 79, 174, 185, 236, 45, 151, 103, 42, 226, 129, 205, 240, 23, 75, 200, 5, 252, 239, 28, 217, 31, 57, 186, 86, 70, 147, 167, 17, 127, 199, 18, 159, 43, 1, 155, 12, 237, 158, 243, 39, 255, 247, 173, 215, 221, 194, 206, 76, 251, 36, 172, 47, 246, 113, 107, 35, 6, 182, 135, 4, 84, 189, 109, 218, 0, 171, 88, 14, 11, 61, 2, 87, 52, 62, 126, 78, 162, 123, 208, 83, 169, 27, 64, 49, 74, 146, 242, 153, 241, 13, 34, 183, 10, 25, 93, 110, 22, 96, 58, 187, 150, 254, 30, 141, 149, 212, 122, 44, 136, 37, 203, 119, 111, 188, 59, 207, 85, 228, 104, 166, 209, 105, 108, 38, 219, 80, 8, 238, 100, 235, 157, 233, 176, 170, 138, 46, 121, 204, 152, 73, 165, 245, 114, 15, 55, 175, 223, 106, 7, 66, 139, 16, 156, 249, 98, 124, 115, 56, 81, 3, 54, 68, 163, 132, 20, 193, 253, 133, 184, 117, 29, 178, 112, 95, 69, 140, 148, 116, 97, 24, 201, 102, 32, 177, 232, 244, 48, 128, 250, 231, 137, 41, 50, 142, 216, 118, 192, 130, 160, 234, 196, 67, 161]
prop_inv_sbox_bravo =  [117, 86, 123, 212, 112, 68, 109, 201, 179, 37, 145, 121, 88, 142, 120, 196, 204, 80, 83, 39, 217, 0, 149, 65, 232, 146, 5, 134, 71, 223, 155, 73, 235, 21, 143, 108, 102, 162, 176, 92, 11, 244, 60, 85, 160, 57, 188, 104, 239, 136, 245, 20, 125, 13, 213, 197, 210, 74, 151, 167, 38, 122, 126, 16, 135, 28, 202, 254, 214, 227, 77, 10, 2, 192, 137, 66, 100, 52, 128, 53, 178, 211, 7, 132, 113, 169, 76, 124, 119, 32, 23, 19, 26, 147, 8, 226, 150, 231, 207, 31, 181, 48, 234, 59, 171, 174, 200, 107, 175, 115, 148, 165, 225, 106, 195, 209, 230, 222, 248, 164, 44, 189, 159, 130, 208, 50, 127, 81, 240, 62, 250, 49, 216, 220, 42, 111, 161, 243, 187, 203, 228, 156, 246, 9, 3, 45, 138, 78, 229, 157, 153, 58, 191, 140, 14, 87, 205, 183, 90, 84, 251, 255, 129, 215, 4, 193, 172, 79, 6, 133, 186, 118, 103, 95, 54, 198, 185, 236, 224, 12, 35, 47, 110, 144, 221, 55, 75, 152, 166, 114, 41, 46, 249, 218, 98, 33, 253, 51, 22, 82, 67, 233, 18, 163, 190, 63, 99, 168, 131, 173, 43, 17, 158, 36, 40, 96, 247, 72, 116, 177, 27, 97, 29, 199, 1, 15, 61, 30, 170, 24, 25, 242, 237, 184, 252, 182, 56, 89, 180, 70, 64, 141, 139, 91, 238, 194, 105, 94, 34, 206, 241, 101, 69, 219, 154, 93]

#Entropy = h =  7.689920261801635 VS Bahram 2021 h =  7.6739952595684615
prop_sbox_Alpha =  [93, 112, 187, 89, 24, 50, 121, 186, 53, 99, 105, 36, 95, 228, 245, 62, 81, 161, 25, 217, 39, 29, 47, 37, 131, 32, 235, 19, 205, 96, 5, 66, 251, 197, 181, 166, 149, 132, 76, 240, 30, 150, 127, 229, 160, 23, 210, 158, 182, 239, 92, 88, 59, 51, 195, 115, 148, 171, 126, 227, 2, 169, 173, 103, 125, 226, 136, 0, 48, 109, 78, 18, 41, 80, 17, 176, 143, 44, 26, 8, 86, 73, 138, 253, 152, 120, 60, 162, 31, 68, 113, 15, 38, 63, 67, 180, 6, 28, 212, 219, 178, 114, 71, 159, 122, 107, 1, 234, 11, 145, 230, 179, 163, 144, 4, 232, 225, 188, 140, 191, 69, 170, 218, 117, 3, 194, 27, 233, 252, 128, 20, 249, 193, 74, 242, 247, 203, 248, 70, 189, 33, 198, 10, 243, 82, 153, 55, 155, 57, 220, 250, 172, 75, 209, 61, 215, 58, 101, 119, 201, 12, 211, 175, 40, 77, 123, 46, 72, 192, 164, 79, 213, 42, 130, 238, 202, 165, 124, 190, 137, 139, 147, 207, 56, 185, 183, 142, 241, 52, 157, 65, 43, 196, 54, 135, 244, 87, 214, 111, 34, 84, 100, 184, 13, 21, 156, 199, 200, 133, 7, 151, 237, 129, 222, 9, 254, 174, 223, 22, 206, 104, 108, 168, 255, 49, 208, 167, 102, 224, 90, 221, 246, 97, 83, 16, 118, 146, 14, 134, 45, 110, 177, 35, 216, 106, 64, 91, 98, 141, 154, 231, 236, 85, 204, 116, 94]
prop_inv_sbox_sbox_Alpha =  [67, 106, 60, 124, 114, 30, 96, 209, 79, 214, 142, 108, 160, 203, 237, 91, 234, 74, 71, 27, 130, 204, 218, 45, 4, 18, 78, 126, 97, 21, 40, 88, 25, 140, 199, 242, 11, 23, 92, 20, 163, 72, 172, 191, 77, 239, 166, 22, 68, 224, 5, 53, 188, 8, 193, 146, 183, 148, 156, 52, 86, 154, 15, 93, 245, 190, 31, 94, 89, 120, 138, 102, 167, 81, 133, 152, 38, 164, 70, 170, 73, 16, 144, 233, 200, 252, 80, 196, 51, 3, 229, 246, 50, 0, 255, 12, 29, 232, 247, 9, 201, 157, 227, 63, 220, 10, 244, 105, 221, 69, 240, 198, 1, 90, 101, 55, 254, 123, 235, 158, 85, 6, 104, 165, 177, 64, 58, 42, 129, 212, 173, 24, 37, 208, 238, 194, 66, 179, 82, 180, 118, 248, 186, 76, 113, 109, 236, 181, 56, 36, 41, 210, 84, 145, 249, 147, 205, 189, 47, 103, 44, 17, 87, 112, 169, 176, 35, 226, 222, 61, 121, 57, 151, 62, 216, 162, 75, 241, 100, 111, 95, 34, 48, 185, 202, 184, 7, 2, 117, 139, 178, 119, 168, 132, 125, 54, 192, 33, 141, 206, 207, 159, 175, 136, 253, 28, 219, 182, 225, 153, 46, 161, 98, 171, 197, 155, 243, 19, 122, 99, 149, 230, 213, 217, 228, 116, 65, 59, 13, 43, 110, 250, 115, 127, 107, 26, 251, 211, 174, 49, 39, 187, 134, 143, 195, 14, 231, 135, 137, 131, 150, 32, 128, 83, 215, 223]

# Entropy  = h =  7.694180448822675 VS Bahram 2021 h =  7.6739952595684615
prop_s_box_Master =  [54, 115, 104, 244, 221, 164, 20, 211, 157, 113, 246, 171, 144, 161, 26, 41, 179, 181, 52, 37, 122, 46, 127, 67, 4, 134, 58, 228, 163, 240, 8, 33, 131, 222, 170, 62, 2, 212, 133, 252, 101, 103, 34, 202, 110, 89, 165, 218, 156, 132, 85, 106, 81, 70, 32, 78, 153, 233, 65, 73, 169, 74, 237, 31, 177, 29, 123, 224, 45, 142, 214, 232, 75, 68, 242, 22, 238, 28, 213, 61, 150, 55, 193, 197, 10, 180, 12, 83, 11, 3, 76, 60, 25, 19, 90, 178, 247, 18, 15, 23, 5, 135, 191, 1, 231, 59, 100, 226, 56, 95, 201, 9, 79, 94, 249, 48, 111, 254, 198, 172, 0, 248, 200, 138, 219, 235, 146, 243, 255, 152, 16, 96, 185, 126, 174, 229, 40, 82, 203, 105, 184, 21, 204, 63, 160, 154, 6, 236, 88, 205, 155, 98, 143, 64, 207, 14, 253, 245, 49, 167, 87, 35, 208, 30, 102, 209, 24, 92, 36, 210, 158, 183, 93, 141, 148, 97, 175, 107, 39, 50, 159, 220, 182, 206, 125, 227, 149, 225, 71, 51, 99, 195, 72, 173, 53, 38, 17, 118, 91, 121, 186, 77, 120, 80, 137, 192, 47, 147, 187, 176, 199, 108, 119, 27, 129, 251, 13, 42, 130, 196, 117, 43, 217, 166, 162, 188, 7, 234, 189, 116, 124, 216, 230, 241, 84, 57, 239, 223, 194, 112, 114, 168, 145, 66, 44, 128, 109, 140, 139, 190, 215, 136, 69, 86, 151, 250]
inv_sbox_Master =  [120, 103, 36, 89, 24, 100, 146, 226, 30, 111, 84, 88, 86, 216, 155, 98, 130, 196, 97, 93, 6, 141, 75, 99, 166, 92, 14, 213, 77, 65, 163, 63, 54, 31, 42, 161, 168, 19, 195, 178, 136, 15, 217, 221, 244, 68, 21, 206, 115, 158, 179, 189, 18, 194, 0, 81, 108, 235, 26, 105, 91, 79, 35, 143, 153, 58, 243, 23, 73, 252, 53, 188, 192, 59, 61, 72, 90, 201, 55, 112, 203, 52, 137, 87, 234, 50, 253, 160, 148, 45, 94, 198, 167, 172, 113, 109, 131, 175, 151, 190, 106, 40, 164, 41, 2, 139, 51, 177, 211, 246, 44, 116, 239, 9, 240, 1, 229, 220, 197, 212, 202, 199, 20, 66, 230, 184, 133, 22, 245, 214, 218, 32, 49, 38, 25, 101, 251, 204, 123, 248, 247, 173, 69, 152, 12, 242, 126, 207, 174, 186, 80, 254, 129, 56, 145, 150, 48, 8, 170, 180, 144, 13, 224, 28, 5, 46, 223, 159, 241, 60, 34, 11, 119, 193, 134, 176, 209, 64, 95, 16, 85, 17, 182, 171, 140, 132, 200, 208, 225, 228, 249, 102, 205, 82, 238, 191, 219, 83, 118, 210, 122, 110, 43, 138, 142, 149, 183, 154, 162, 165, 169, 7, 37, 78, 70, 250, 231, 222, 47, 124, 181, 4, 33, 237, 67, 187, 107, 185, 27, 135, 232, 104, 71, 57, 227, 125, 147, 62, 76, 236, 29, 233, 74, 127, 3, 157, 10, 96, 121, 114, 255, 215, 39, 156, 117, 128]
 

#Entropy = h  =  7.6827305795682 
s_box =  [21, 224, 72, 144, 164, 26, 168, 82, 94, 143, 71, 40, 179, 53, 154, 225, 63, 211, 202, 91, 51, 33, 198, 90, 229, 230, 92, 220, 65, 222, 227, 99, 89, 195, 248, 180, 213, 9, 60, 19, 214, 190, 134, 210, 120, 145, 191, 181, 101, 131, 125, 197, 77, 79, 174, 185, 236, 45, 151, 103, 42, 226, 129, 205, 240, 23, 75, 200, 5, 252, 239, 28, 217, 31, 57, 186, 86, 70, 147, 167, 17, 127, 199, 18, 159, 43, 1, 155, 12, 237, 158, 243, 39, 255, 247, 173, 215, 221, 194, 206, 76, 251, 36, 172, 47, 246, 113, 107, 35, 6, 182, 135, 4, 84, 189, 109, 218, 0, 171, 88, 14, 11, 61, 2, 87, 52, 62, 126, 78, 162, 123, 208, 83, 169, 27, 64, 49, 74, 146, 242, 153, 241, 13, 34, 183, 10, 25, 93, 110, 22, 96, 58, 187, 150, 254, 30, 141, 149, 212, 122, 44, 136, 37, 203, 119, 111, 188, 59, 207, 85, 228, 104, 166, 209, 105, 108, 38, 219, 80, 8, 238, 100, 235, 157, 233, 176, 170, 138, 46, 121, 204, 152, 73, 165, 245, 114, 15, 55, 175, 223, 106, 7, 66, 139, 16, 156, 249, 98, 124, 115, 56, 81, 3, 54, 68, 163, 132, 20, 193, 253, 133, 184, 117, 29, 178, 112, 95, 69, 140, 148, 116, 97, 24, 201, 102, 32, 177, 232, 244, 48, 128, 250, 231, 137, 41, 50, 142, 216, 118, 192, 130, 160, 234, 196, 67, 161]
inv_s_box =  [117, 86, 123, 212, 112, 68, 109, 201, 179, 37, 145, 121, 88, 142, 120, 196, 204, 80, 83, 39, 217, 0, 149, 65, 232, 146, 5, 134, 71, 223, 155, 73, 235, 21, 143, 108, 102, 162, 176, 92, 11, 244, 60, 85, 160, 57, 188, 104, 239, 136, 245, 20, 125, 13, 213, 197, 210, 74, 151, 167, 38, 122, 126, 16, 135, 28, 202, 254, 214, 227, 77, 10, 2, 192, 137, 66, 100, 52, 128, 53, 178, 211, 7, 132, 113, 169, 76, 124, 119, 32, 23, 19, 26, 147, 8, 226, 150, 231, 207, 31, 181, 48, 234, 59, 171, 174, 200, 107, 175, 115, 148, 165, 225, 106, 195, 209, 230, 222, 248, 164, 44, 189, 159, 130, 208, 50, 127, 81, 240, 62, 250, 49, 216, 220, 42, 111, 161, 243, 187, 203, 228, 156, 246, 9, 3, 45, 138, 78, 229, 157, 153, 58, 191, 140, 14, 87, 205, 183, 90, 84, 251, 255, 129, 215, 4, 193, 172, 79, 6, 133, 186, 118, 103, 95, 54, 198, 185, 236, 224, 12, 35, 47, 110, 144, 221, 55, 75, 152, 166, 114, 41, 46, 249, 218, 98, 33, 253, 51, 22, 82, 67, 233, 18, 163, 190, 63, 99, 168, 131, 173, 43, 17, 158, 36, 40, 96, 247, 72, 116, 177, 27, 97, 29, 199, 1, 15, 61, 30, 170, 24, 25, 242, 237, 184, 252, 182, 56, 89, 180, 70, 64, 141, 139, 91, 238, 194, 105, 94, 34, 206, 241, 101, 69, 219, 154, 93]



msbox1F =  [15, 14, 0, 1, 3, 2, 12, 13, 4, 9, 7, 10, 8, 5, 11, 6]
msbox1B =  [2, 3, 5, 4, 8, 13, 15, 10, 12, 9, 11, 14, 6, 7, 1, 0]
msbox2F =  [5, 8, 6, 11, 9, 4, 10, 7, 2, 3, 13, 12, 14, 15, 1, 0]
msbox2B =  [15, 14, 8, 9, 5, 0, 2, 7, 1, 4, 6, 3, 11, 10, 12, 13]

#Entropy = 7.654255092053674
lsbox1F =  [11, 3, 13, 0, 9, 5, 4, 10, 12, 7, 8, 1, 2, 6, 14, 15]
lsbox1B =  [3, 11, 12, 1, 6, 5, 13, 9, 10, 4, 7, 0, 8, 2, 14, 15]
lsbox2F =  [14, 9, 13, 4, 2, 7, 8, 3, 12, 0, 1, 5, 11, 6, 15, 10]
lsbox2B =  [9, 10, 4, 7, 3, 11, 13, 5, 6, 1, 15, 12, 8, 2, 0, 14]

#Entropy = 7.659934382909035
ksbox1F =  [15, 5, 8, 9, 10, 6, 7, 4, 3, 1, 12, 0, 11, 2, 13, 14]
ksbox1B =  [11, 9, 13, 8, 7, 1, 5, 6, 2, 3, 4, 12, 10, 14, 15, 0]
ksbox2F =  [7, 2, 14, 8, 13, 12, 11, 3, 1, 10, 9, 6, 5, 4, 15, 0]
ksbox2B =  [15, 8, 1, 7, 13, 12, 11, 0, 3, 10, 9, 6, 5, 4, 2, 14]



sbox1F = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
sbox1B = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
sbox2F = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
sbox2B = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]

bsbox1F = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
bsbox1B = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
bsbox2F = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
bsbox2B = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]




# Calculate information entropy
def entropy_info(labels, base=None):
    value, counts = np.unique(labels, return_counts=True)
    norm_counts = counts / counts.sum()
    #print(norm_counts)
    base = e if base is None else base
    return -(norm_counts * np.log(norm_counts) / np.log(base)).sum()  # log(a) b=log (c) b÷log (c) a



''' ..............Iteration no  1327 ............Best Entropy =  7.6827305795682  .......
1327 . New Entropy  <  Best Entropy =  =  7.632788378476045  <  7.6827305795682
Found Better SBOX  with h =  7.689920261801635  Against Previous h =  7.689920261801635  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [93, 112, 187, 89, 24, 50, 121, 186, 53, 99, 105, 36, 95, 228, 245, 62, 81, 161, 25, 217, 39, 29, 47, 37, 131, 32, 235, 19, 205, 96, 5, 66, 251, 197, 181, 166, 149, 132, 76, 240, 30, 150, 127, 229, 160, 23, 210, 158, 182, 239, 92, 88, 59, 51, 195, 115, 148, 171, 126, 227, 2, 169, 173, 103, 125, 226, 136, 0, 48, 109, 78, 18, 41, 80, 17, 176, 143, 44, 26, 8, 86, 73, 138, 253, 152, 120, 60, 162, 31, 68, 113, 15, 38, 63, 67, 180, 6, 28, 212, 219, 178, 114, 71, 159, 122, 107, 1, 234, 11, 145, 230, 179, 163, 144, 4, 232, 225, 188, 140, 191, 69, 170, 218, 117, 3, 194, 27, 233, 252, 128, 20, 249, 193, 74, 242, 247, 203, 248, 70, 189, 33, 198, 10, 243, 82, 153, 55, 155, 57, 220, 250, 172, 75, 209, 61, 215, 58, 101, 119, 201, 12, 211, 175, 40, 77, 123, 46, 72, 192, 164, 79, 213, 42, 130, 238, 202, 165, 124, 190, 137, 139, 147, 207, 56, 185, 183, 142, 241, 52, 157, 65, 43, 196, 54, 135, 244, 87, 214, 111, 34, 84, 100, 184, 13, 21, 156, 199, 200, 133, 7, 151, 237, 129, 222, 9, 254, 174, 223, 22, 206, 104, 108, 168, 255, 49, 208, 167, 102, 224, 90, 221, 246, 97, 83, 16, 118, 146, 14, 134, 45, 110, 177, 35, 216, 106, 64, 91, 98, 141, 154, 231, 236, 85, 204, 116, 94]
Invserse sbox =  [67, 106, 60, 124, 114, 30, 96, 209, 79, 214, 142, 108, 160, 203, 237, 91, 234, 74, 71, 27, 130, 204, 218, 45, 4, 18, 78, 126, 97, 21, 40, 88, 25, 140, 199, 242, 11, 23, 92, 20, 163, 72, 172, 191, 77, 239, 166, 22, 68, 224, 5, 53, 188, 8, 193, 146, 183, 148, 156, 52, 86, 154, 15, 93, 245, 190, 31, 94, 89, 120, 138, 102, 167, 81, 133, 152, 38, 164, 70, 170, 73, 16, 144, 233, 200, 252, 80, 196, 51, 3, 229, 246, 50, 0, 255, 12, 29, 232, 247, 9, 201, 157, 227, 63, 220, 10, 244, 105, 221, 69, 240, 198, 1, 90, 101, 55, 254, 123, 235, 158, 85, 6, 104, 165, 177, 64, 58, 42, 129, 212, 173, 24, 37, 208, 238, 194, 66, 179, 82, 180, 118, 248, 186, 76, 113, 109, 236, 181, 56, 36, 41, 210, 84, 145, 249, 147, 205, 189, 47, 103, 44, 17, 87, 112, 169, 176, 35, 226, 222, 61, 121, 57, 151, 62, 216, 162, 75, 241, 100, 111, 95, 34, 48, 185, 202, 184, 7, 2, 117, 139, 178, 119, 168, 132, 125, 54, 192, 33, 141, 206, 207, 159, 175, 136, 253, 28, 219, 182, 225, 153, 46, 161, 98, 171, 197, 155, 243, 19, 122, 99, 149, 230, 213, 217, 228, 116, 65, 59, 13, 43, 110, 250, 115, 127, 107, 26, 251, 211, 174, 49, 39, 187, 134, 143, 195, 14, 231, 135, 137, 131, 150, 32, 128, 83, 215, 223]
Final Generated SBOX PAIRS : 
sbox1F =  [13, 1, 2, 0, 4, 10, 6, 15, 5, 12, 9, 14, 11, 7, 8, 3]
sbox1B =  [3, 1, 2, 15, 4, 8, 6, 13, 14, 10, 5, 12, 9, 0, 11, 7]
sbox2F =  [2, 13, 10, 5, 7, 0, 12, 8, 14, 9, 6, 1, 4, 3, 15, 11]
sbox2B =  [5, 11, 0, 13, 12, 3, 10, 4, 7, 9, 2, 15, 6, 1, 8, 14]
Final SBOX  with h =  7.689920261801635  Against Previous h =  7.689920261801635  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [93, 112, 187, 89, 24, 50, 121, 186, 53, 99, 105, 36, 95, 228, 245, 62, 81, 161, 25, 217, 39, 29, 47, 37, 131, 32, 235, 19, 205, 96, 5, 66, 251, 197, 181, 166, 149, 132, 76, 240, 30, 150, 127, 229, 160, 23, 210, 158, 182, 239, 92, 88, 59, 51, 195, 115, 148, 171, 126, 227, 2, 169, 173, 103, 125, 226, 136, 0, 48, 109, 78, 18, 41, 80, 17, 176, 143, 44, 26, 8, 86, 73, 138, 253, 152, 120, 60, 162, 31, 68, 113, 15, 38, 63, 67, 180, 6, 28, 212, 219, 178, 114, 71, 159, 122, 107, 1, 234, 11, 145, 230, 179, 163, 144, 4, 232, 225, 188, 140, 191, 69, 170, 218, 117, 3, 194, 27, 233, 252, 128, 20, 249, 193, 74, 242, 247, 203, 248, 70, 189, 33, 198, 10, 243, 82, 153, 55, 155, 57, 220, 250, 172, 75, 209, 61, 215, 58, 101, 119, 201, 12, 211, 175, 40, 77, 123, 46, 72, 192, 164, 79, 213, 42, 130, 238, 202, 165, 124, 190, 137, 139, 147, 207, 56, 185, 183, 142, 241, 52, 157, 65, 43, 196, 54, 135, 244, 87, 214, 111, 34, 84, 100, 184, 13, 21, 156, 199, 200, 133, 7, 151, 237, 129, 222, 9, 254, 174, 223, 22, 206, 104, 108, 168, 255, 49, 208, 167, 102, 224, 90, 221, 246, 97, 83, 16, 118, 146, 14, 134, 45, 110, 177, 35, 216, 106, 64, 91, 98, 141, 154, 231, 236, 85, 204, 116, 94]
Invserse sbox =  [67, 106, 60, 124, 114, 30, 96, 209, 79, 214, 142, 108, 160, 203, 237, 91, 234, 74, 71, 27, 130, 204, 218, 45, 4, 18, 78, 126, 97, 21, 40, 88, 25, 140, 199, 242, 11, 23, 92, 20, 163, 72, 172, 191, 77, 239, 166, 22, 68, 224, 5, 53, 188, 8, 193, 146, 183, 148, 156, 52, 86, 154, 15, 93, 245, 190, 31, 94, 89, 120, 138, 102, 167, 81, 133, 152, 38, 164, 70, 170, 73, 16, 144, 233, 200, 252, 80, 196, 51, 3, 229, 246, 50, 0, 255, 12, 29, 232, 247, 9, 201, 157, 227, 63, 220, 10, 244, 105, 221, 69, 240, 198, 1, 90, 101, 55, 254, 123, 235, 158, 85, 6, 104, 165, 177, 64, 58, 42, 129, 212, 173, 24, 37, 208, 238, 194, 66, 179, 82, 180, 118, 248, 186, 76, 113, 109, 236, 181, 56, 36, 41, 210, 84, 145, 249, 147, 205, 189, 47, 103, 44, 17, 87, 112, 169, 176, 35, 226, 222, 61, 121, 57, 151, 62, 216, 162, 75, 241, 100, 111, 95, 34, 48, 185, 202, 184, 7, 2, 117, 139, 178, 119, 168, 132, 125, 54, 192, 33, 141, 206, 207, 159, 175, 136, 253, 28, 219, 182, 225, 153, 46, 161, 98, 171, 197, 155, 243, 19, 122, 99, 149, 230, 213, 217, 228, 116, 65, 59, 13, 43, 110, 250, 115, 127, 107, 26, 251, 211, 174, 49, 39, 187, 134, 143, 195, 14, 231, 135, 137, 131, 150, 32, 128, 83, 215, 223]
Generate Secure Sbox Program is Ended Successfully !!!
Program is Ended Successfully !!! '''


''' ...............Iteration no  458 ............Best Entropy =  7.689920261801635  .......
458 . New Entropy  <  Best Entropy =  =  7.6141214266175625  <  7.689920261801635
Found Better SBOX  with h =  7.694180448822675  Against Previous h =  7.694180448822675  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [54, 115, 104, 244, 221, 164, 20, 211, 157, 113, 246, 171, 144, 161, 26, 41, 179, 181, 52, 37, 122, 46, 127, 67, 4, 134, 58, 228, 163, 240, 8, 33, 131, 222, 170, 62, 2, 212, 133, 252, 101, 103, 34, 202, 110, 89, 165, 218, 156, 132, 85, 106, 81, 70, 32, 78, 153, 233, 65, 73, 169, 74, 237, 31, 177, 29, 123, 224, 45, 142, 214, 232, 75, 68, 242, 22, 238, 28, 213, 61, 150, 55, 193, 197, 10, 180, 12, 83, 11, 3, 76, 60, 25, 19, 90, 178, 247, 18, 15, 23, 5, 135, 191, 1, 231, 59, 100, 226, 56, 95, 201, 9, 79, 94, 249, 48, 111, 254, 198, 172, 0, 248, 200, 138, 219, 235, 146, 243, 255, 152, 16, 96, 185, 126, 174, 229, 40, 82, 203, 105, 184, 21, 204, 63, 160, 154, 6, 236, 88, 205, 155, 98, 143, 64, 207, 14, 253, 245, 49, 167, 87, 35, 208, 30, 102, 209, 24, 92, 36, 210, 158, 183, 93, 141, 148, 97, 175, 107, 39, 50, 159, 220, 182, 206, 125, 227, 149, 225, 71, 51, 99, 195, 72, 173, 53, 38, 17, 118, 91, 121, 186, 77, 120, 80, 137, 192, 47, 147, 187, 176, 199, 108, 119, 27, 129, 251, 13, 42, 130, 196, 117, 43, 217, 166, 162, 188, 7, 234, 189, 116, 124, 216, 230, 241, 84, 57, 239, 223, 194, 112, 114, 168, 145, 66, 44, 128, 109, 140, 139, 190, 215, 136, 69, 86, 151, 250]
Invserse sbox =  [120, 103, 36, 89, 24, 100, 146, 226, 30, 111, 84, 88, 86, 216, 155, 98, 130, 196, 97, 93, 6, 141, 75, 99, 166, 92, 14, 213, 77, 65, 163, 63, 54, 31, 42, 161, 168, 19, 195, 178, 136, 15, 217, 221, 244, 68, 21, 206, 115, 158, 179, 189, 18, 194, 0, 81, 108, 235, 26, 105, 91, 79, 35, 143, 153, 58, 243, 23, 73, 252, 53, 188, 192, 59, 61, 72, 90, 201, 55, 112, 203, 52, 137, 87, 234, 50, 253, 160, 148, 45, 94, 198, 167, 172, 113, 109, 131, 175, 151, 190, 106, 40, 164, 41, 2, 139, 51, 177, 211, 246, 44, 116, 239, 9, 240, 1, 229, 220, 197, 212, 202, 199, 20, 66, 230, 184, 133, 22, 245, 214, 218, 32, 49, 38, 25, 101, 251, 204, 123, 248, 247, 173, 69, 152, 12, 242, 126, 207, 174, 186, 80, 254, 129, 56, 145, 150, 48, 8, 170, 180, 144, 13, 224, 28, 5, 46, 223, 159, 241, 60, 34, 11, 119, 193, 134, 176, 209, 64, 95, 16, 85, 17, 182, 171, 140, 132, 200, 208, 225, 228, 249, 102, 205, 82, 238, 191, 219, 83, 118, 210, 122, 110, 43, 138, 142, 149, 183, 154, 162, 165, 169, 7, 37, 78, 70, 250, 231, 222, 47, 124, 181, 4, 33, 237, 67, 187, 107, 185, 27, 135, 232, 104, 71, 57, 227, 125, 147, 62, 76, 236, 29, 233, 74, 127, 3, 157, 10, 96, 121, 114, 255, 215, 39, 156, 117, 128]
Final Generated SBOX PAIRS : 
sbox1F =  [7, 10, 11, 3, 8, 5, 6, 13, 15, 9, 4, 14, 2, 12, 0, 1]
sbox1B =  [14, 15, 12, 3, 10, 5, 6, 0, 4, 9, 1, 2, 13, 7, 11, 8]
sbox2F =  [11, 12, 10, 15, 13, 3, 0, 2, 1, 4, 14, 9, 7, 5, 6, 8]
sbox2B =  [6, 8, 7, 5, 9, 13, 14, 12, 15, 11, 2, 0, 1, 4, 10, 3]
Final SBOX  with h =  7.694180448822675  Against Previous h =  7.694180448822675  : 
Latest Generated SBOX PAIRS : 
Normal   sbox =  [54, 115, 104, 244, 221, 164, 20, 211, 157, 113, 246, 171, 144, 161, 26, 41, 179, 181, 52, 37, 122, 46, 127, 67, 4, 134, 58, 228, 163, 240, 8, 33, 131, 222, 170, 62, 2, 212, 133, 252, 101, 103, 34, 202, 110, 89, 165, 218, 156, 132, 85, 106, 81, 70, 32, 78, 153, 233, 65, 73, 169, 74, 237, 31, 177, 29, 123, 224, 45, 142, 214, 232, 75, 68, 242, 22, 238, 28, 213, 61, 150, 55, 193, 197, 10, 180, 12, 83, 11, 3, 76, 60, 25, 19, 90, 178, 247, 18, 15, 23, 5, 135, 191, 1, 231, 59, 100, 226, 56, 95, 201, 9, 79, 94, 249, 48, 111, 254, 198, 172, 0, 248, 200, 138, 219, 235, 146, 243, 255, 152, 16, 96, 185, 126, 174, 229, 40, 82, 203, 105, 184, 21, 204, 63, 160, 154, 6, 236, 88, 205, 155, 98, 143, 64, 207, 14, 253, 245, 49, 167, 87, 35, 208, 30, 102, 209, 24, 92, 36, 210, 158, 183, 93, 141, 148, 97, 175, 107, 39, 50, 159, 220, 182, 206, 125, 227, 149, 225, 71, 51, 99, 195, 72, 173, 53, 38, 17, 118, 91, 121, 186, 77, 120, 80, 137, 192, 47, 147, 187, 176, 199, 108, 119, 27, 129, 251, 13, 42, 130, 196, 117, 43, 217, 166, 162, 188, 7, 234, 189, 116, 124, 216, 230, 241, 84, 57, 239, 223, 194, 112, 114, 168, 145, 66, 44, 128, 109, 140, 139, 190, 215, 136, 69, 86, 151, 250]
Invserse sbox =  [120, 103, 36, 89, 24, 100, 146, 226, 30, 111, 84, 88, 86, 216, 155, 98, 130, 196, 97, 93, 6, 141, 75, 99, 166, 92, 14, 213, 77, 65, 163, 63, 54, 31, 42, 161, 168, 19, 195, 178, 136, 15, 217, 221, 244, 68, 21, 206, 115, 158, 179, 189, 18, 194, 0, 81, 108, 235, 26, 105, 91, 79, 35, 143, 153, 58, 243, 23, 73, 252, 53, 188, 192, 59, 61, 72, 90, 201, 55, 112, 203, 52, 137, 87, 234, 50, 253, 160, 148, 45, 94, 198, 167, 172, 113, 109, 131, 175, 151, 190, 106, 40, 164, 41, 2, 139, 51, 177, 211, 246, 44, 116, 239, 9, 240, 1, 229, 220, 197, 212, 202, 199, 20, 66, 230, 184, 133, 22, 245, 214, 218, 32, 49, 38, 25, 101, 251, 204, 123, 248, 247, 173, 69, 152, 12, 242, 126, 207, 174, 186, 80, 254, 129, 56, 145, 150, 48, 8, 170, 180, 144, 13, 224, 28, 5, 46, 223, 159, 241, 60, 34, 11, 119, 193, 134, 176, 209, 64, 95, 16, 85, 17, 182, 171, 140, 132, 200, 208, 225, 228, 249, 102, 205, 82, 238, 191, 219, 83, 118, 210, 122, 110, 43, 138, 142, 149, 183, 154, 162, 165, 169, 7, 37, 78, 70, 250, 231, 222, 47, 124, 181, 4, 33, 237, 67, 187, 107, 185, 27, 135, 232, 104, 71, 57, 227, 125, 147, 62, 76, 236, 29, 233, 74, 127, 3, 157, 10, 96, 121, 114, 255, 215, 39, 156, 117, 128]
 '''

def entropy(signal):
    '''
    function returns entropy of a signal
    signal must be a 1-D numpy array
    '''
    lensig = signal.size
    symset = list(set(signal))
    numsym = len(symset)
    propab = [np.size(signal[signal == i]) / (1.0 * lensig) for i in symset]
    ent = np.sum([p * np.log2(1.0 / p) for p in propab])
    return ent

def sub_bytes(s):
    start_time = time.time()
    so = s_box[s]
    #print("sBox Execution Time --- %s seconds ---" % (time.time() - start_time))
    return so


def inv_sub_bytes(s):
    start_time = time.time()
    so = inv_s_box[s]
    #print("Inv-sBox Execution Time --- %s seconds ---" % (time.time() - start_time))
    return so

def byteSplit(integer):
    return divmod(integer, 0x10)

def byteJoin(num1, num2):
    #num1=0x25;
    #num2=0x71;
    num3=(num1<<4)|(num2);
    #print("%x %d",num3,num3);
    return num3


def s_box_proposed(byteIn):
    start_time = time.time()
    byteHigh, byteLow = byteSplit(byteIn)
    newByteLow = sbox2F[byteLow]
    newByteHigh = sbox1F[byteHigh]^newByteLow

    byteOut = byteJoin(newByteHigh,newByteLow)
    #print("\nSbox Values is ",hex(byteOut))
    #print("sBox Execution Time --- %s seconds ---" % (time.time() - start_time))

    return byteOut

def inv_s_box_proposed(byteIn):
    start_time = time.time()
    byteHigh, byteLow = byteSplit(byteIn)
    newByteHigh = sbox1B[byteHigh^byteLow]
    newByteLow = sbox2B[byteLow]
    byteOut = byteJoin(newByteHigh,newByteLow)
    #print("\nSbox Values is ",hex(byteOut))
    #print("Inv-sBox Execution Time --- %s seconds ---" % (time.time() - start_time))

    return byteOut

class NeuralNetwork:
    def __init__(self, learning_rate):
        self.weights = np.array([np.random.randn(), np.random.randn()])
        self.bias = np.random.randn()
        self.learning_rate = learning_rate

    def _sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def _sigmoid_deriv(self, x):
        return self._sigmoid(x) * (1 - self._sigmoid(x))

    def predict(self, input_vector):
        layer_1 = np.dot(input_vector, self.weights) + self.bias
        layer_2 = self._sigmoid(layer_1)
        prediction = layer_2
        return prediction

    def _compute_gradients(self, input_vector, target):
        layer_1 = np.dot(input_vector, self.weights) + self.bias
        layer_2 = self._sigmoid(layer_1)
        prediction = layer_2

        derror_dprediction = 2 * (prediction - target)
        dprediction_dlayer1 = self._sigmoid_deriv(layer_1)
        dlayer1_dbias = 1
        dlayer1_dweights = (0 * self.weights) + (1 * input_vector)

        derror_dbias = (
            derror_dprediction * dprediction_dlayer1 * dlayer1_dbias
        )
        derror_dweights = (
            derror_dprediction * dprediction_dlayer1 * dlayer1_dweights
        )

        return derror_dbias, derror_dweights

    def _update_parameters(self, derror_dbias, derror_dweights):
        self.bias = self.bias - (derror_dbias * self.learning_rate)
        self.weights = self.weights - (
            derror_dweights * self.learning_rate
        )


    def train(self, input_vectors, targets, iterations):
        cumulative_errors = []
        for current_iteration in range(iterations):
            # Pick a data instance at random
            random_data_index = np.random.randint(len(input_vectors))

            input_vector = input_vectors[random_data_index]
            target = targets[random_data_index]

            # Compute the gradients and update the weights
            derror_dbias, derror_dweights = self._compute_gradients(
                input_vector, target
            )

            self._update_parameters(derror_dbias, derror_dweights)

            # Measure the cumulative error for all the instances
            if current_iteration % 100 == 0:
                cumulative_error = 0
                # Loop through all the instances to measure the error
                for data_instance_index in range(len(input_vectors)):
                    data_point = input_vectors[data_instance_index]
                    target = targets[data_instance_index]

                    prediction = self.predict(data_point)
                    error = np.square(prediction - target)

                    cumulative_error = cumulative_error + error
                cumulative_errors.append(cumulative_error)

        return cumulative_errors

def entropy(string):
    "Calculates the Shannon entropy of a string"

    # get probability of chars in string
    prob = [ float(string.count(c)) / len(string) for c in dict.fromkeys(list(string)) ]

    # calculate the entropy
    entropy = - sum([ p * math.log(p) / math.log(2.0) for p in prob ])

    return entropy


# Calculate information entropy
def entropy_info(labels, base=None):
    value, counts = np.unique(labels, return_counts=True)
    norm_counts = counts / counts.sum()
    #print(norm_counts)
    base = e if base is None else base
    return -(norm_counts * np.log(norm_counts) / np.log(base)).sum()  # log(a) b=log (c) b÷log (c) a





def entropy_ideal(length):
    "Calculates the ideal Shannon entropy of a string with given length"

    prob = 1.0 / length

    return -1.0 * length * prob * math.log(prob) / math.log(2.0)

def dot_product():
    print("Dot Product Program is Started........... !!!")
    
    input_vector = [1.72, 1.23]
    weights_1 = [1.26, 0]
    weights_2 = [2.17, 0.32]
    # Computing the dot product of input_vector and weights_1
    first_indexes_mult = input_vector[0] * weights_1[0]
    second_indexes_mult = input_vector[1] * weights_1[1]
    dot_product_1 = first_indexes_mult + second_indexes_mult
    print(f"The dot product ( ) is: {dot_product_1}")
    dot_product_1 = np.dot(input_vector, weights_1)

    print(f"The dot product1 (np)is: {dot_product_1}")
    
    dot_product_2 = np.dot(input_vector, weights_2)
    print(f"The dot product2 is: {dot_product_2}")
    
    print("Dot Product Program is Ended Successfully !!!")

def runsboximage():
    # Program Started 
    im = Image.open(r"/Users/bilaldastagir/Documents/vscode/pnn/Lenna.png")  
    # This method will show image in any image viewer  
    #im.show()
    #print(im)/
    #im_sequence = im.get(data)
    image_array_inT = np.array(im)
    image_array_outT = image_array_inT
    image_array_in = np.array(im)
    image_array_out=image_array_in
    #print(image_array_in[0][0][0])
    for i in range(len(image_array_in)):
        for j in range(len(image_array_in)):
            for k in range(3):
                image_array_out[i][j][k]=s_box_proposed(image_array_in[i][j][k])
                image_array_outT[i][j][k] = sub_bytes(image_array_inT[i][j][k])
            #print(image_array_in[i][j])
    #print(len(image_array_in))
    
    data=Image.fromarray(image_array_out)
    data.save('/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Proposed.png')
    
    
    dataT = Image.fromarray(image_array_outT)
    dataT.save('/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Trad_AES.png')

   # data.save('Lenna_C0.png')
    

        

    # open method used to open different extension image file 
    imT = Image.open(r'/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Trad_AES.png')
    image_array_inT = np.array(imT)
    image_array_outT = image_array_inT
    im = Image.open(r'/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Proposed.png')
    image_array_in = np.array(im)
    image_array_out = image_array_in
    # This method will show image in any image viewer  
    #im.show()
    #print(im)
    #im_sequence = im.get(data)
    image_array_in = np.array(im)
    image_array_out=image_array_in
    #print(image_array_in[0][0][0])
    for i in range(len(image_array_in)):
        for j in range(len(image_array_in)):
            for k in range(3):
                image_array_out[i][j][k]=inv_s_box_proposed(image_array_in[i][j][k])
                image_array_outT[i][j][k] = inv_sub_bytes(image_array_inT[i][j][k])
            #print(image_array_in[i][j])
    #print(len(image_array_in))
    
		
		
    data=Image.fromarray(image_array_out)
    data.save('/Users/bilaldastagir/Documents/vscode/pnn/Lenna_D_Proposed.png')
    dataT = Image.fromarray(image_array_outT)
    dataT.save('/Users/bilaldastagir/Documents/vscode/pnn/Lenna_D_Trad_AES.png')
    #im = Image.open(r'Lenna_D.png')
    #im.show()
    
    
   # imageLennaOriginal = Image.open(r"/Users/bilaldastagir/Documents/vscode/pnn/Lenna.png")  
   # h1 = entropy_info(imageLennaOriginal, 2)
   # print('Lenna Original    -> h=', shannon_entropy(imageLennaOriginal, 2))
   # print('Lenna Original    -> h=', h1)
   # imageLenna_C_Trad_AES= Image.open(r"/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Trad_AES.png")  
   # h2 = entropy_info(imageLenna_C_Trad_AES, 2)
   # print('Lenna_C_Trad_AES  -> h=', shannon_entropy(imageLenna_C_Trad_AES, 2))
   # print('Lenna_C_Trad_AES  -> h=', h2)
   
    #imageLenna_C_Proposed = Image.open(r"/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Proposed.png")  
    #h3 = entropy_info(imageLenna_C_Proposed, 2)
    #print('Lenna_C_Proposed  -> h=', shannon_entropy(imageLenna_C_Proposed, 2))
    #print('Lenna_C_Proposed  -> h=', h3)
    #imageLenna_D_Trad_AES = Image.open(r"/Users/bilaldastagir/Documents/vscode/pnn/Lenna_D_Trad_AES.png")  
    #h4 = entropy_info(imageLenna_D_Trad_AES, 2)
    #print('Lenna_D_Trad_AES  -> h=', shannon_entropy(imageLenna_D_Trad_AES, 2))
    #print('Lenna_D_Trad_AES  -> h=', h4)
    #imageLenna_D_Proposed = Image.open(r"/Users/bilaldastagir/Documents/vscode/pnn/Lenna_D_Proposed.png")  
    #h5 = entropy_info(imageLenna_D_Proposed, 2)
    #print('Lenna_D_Proposed  -> h=', shannon_entropy(imageLenna_D_Proposed, 2))
    #print('Lenna_D_Proposed  -> h=', h5)
    
   


    #lenna Image Finished ......
    # Program Finished 

def find_entropy():
    # Program Started 
    img1 = cv2.imread("/Users/bilaldastagir/Documents/vscode/pnn/Lenna.png", cv2.IMREAD_GRAYSCALE)
    img2 = cv2.imread("/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Trad_AES.png", cv2.IMREAD_GRAYSCALE)
    img3 = cv2.imread("/Users/bilaldastagir/Documents/vscode/pnn/Lenna_C_Proposed.png", cv2.IMREAD_GRAYSCALE)
    
    h1 = shannon_entropy(img1, 2)
    h2 = shannon_entropy(img2, 2)
    h3 = shannon_entropy(img3, 2)
    
    #print('Lenna_O_Original -> h1 =', h1)
    #print('Lenna_C_Trad_AES -> h2 =', h2)
    #print('Lenna_C_Proposed -> h3 =', h3)
    
    

    return h1, h2, h3
    
    # Program Finished 


def runsboxANN():
    print("sbox ANN Program is Started........... !!!")
    
    input_vectors = np.array(
        [
            [3, 1.5],
            [2, 1],
            [4, 1.5],
            [3, 4],
            [3.5, 0.5],
            [2, 0.5],
            [5.5, 1],
            [1, 1],
        ]
    )
    
    targets = np.array([0,1,0,1,0,1,1,0])
    learning_rate = 0.1
    epoch = 10000
    sboxANN = NeuralNetwork(learning_rate)
    training_error = sboxANN.train(input_vectors,targets,epoch)
    plt.plot(training_error)
    plt.xlabel("Iterations")
    plt.ylabel("Error for all training instances")
    plt.savefig("Cumalative_Error.png")
    
    
    print("Result :  ",sboxANN.predict(input_vectors))
    
    print("sbox ANN Program is Ended Successfully !!!")   

def generate_Dual_sboxFB(len):
    # Program Started 
    #sboxlist = random.sample(range(0, len), len)
    #sboxF =  [15, 14, 0, 1, 3, 2, 12, 13, 4, 9, 7, 10, 8, 5, 11, 6]
    sboxF1 = random.sample(range(0, len), len)
    sboxF2 = random.sample(range(0, len), len)
    #sboxF = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
    #sbox1B = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
    #sbox2B = [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
    for i in range(len):
        sbox1F[i] = sboxF1[i]
        sbox2F[i] = sboxF2[i]
        sbox1B[sbox1F[i]] = i
        sbox2B[sbox2F[i]] = i
    return sbox1F, sbox1B, sbox2F, sbox2B

def generate_sboxPair(len):
    # Program Started 
    sboxL = random.sample(range(0, len), len)
    for i in range(len):
        s_box[i] = sboxL[i]
        inv_s_box[s_box[i]] = i
    return s_box, inv_s_box
    # Program Ended
    
def get_inv_sbox(sboxFL,len):  
    # Program Started
    sboxBL = sboxFL
    for i in range(len):
        sboxBL[sboxFL[i]] = i
    return sboxBL
    # Program Ended   
    
def update_sbox(len, sboxf1,sboxb1,sboxf2,sboxb2):
    # Program Started 
    for i in range(len):
        sbox1F[i] = sboxf1[i]
        sbox2F[i] = sboxf2[i]
        sbox1B[i] = sboxb1[i]
        sbox2B[i] = sboxb2[i]
    return sbox1F, sbox1B, sbox2F, sbox2B
    # Program Ended

def update_sbox_pair(len, sboxFL, sboxBL):
    # Program Started 
    for i in range(len):
        s_box[i] = sboxFL[i]
        inv_s_box[i] = sboxBL[i]
    return s_box, inv_s_box
    # Program Ended

def generate_secure_sbox():
    print("Generate Secure Sbox Program is Started........... !!!")
    len = 16
    i=0
    h3 = 0
    
    sbox1F, sbox1B, sbox2F, sbox2B = update_sbox(len, msbox1F,msbox1B,msbox2F,msbox2B)
    runsboximage()
    h1, h2, h3 = find_entropy()
    print("\nMagic Square SBox Entropy h = ",h3)
    #print("sbox1F = ",sbox1F) 
    #print("sbox1B = ",sbox1B)
    #print("sbox2F = ",sbox2F) 
    #print("sbox2B = ",sbox2B)  
    
    #sbox1F, sbox1B, sbox2F, sbox2B = update_sbox(len, lsbox1F,lsbox1B,lsbox2F,lsbox2B)
    
    #runsboximage()
    #h1, h2, h3 = find_entropy()
    #print("sbox1F = ",sbox1F) 
    #print("sbox1B = ",sbox1B)
    #print("sbox2F = ",sbox2F) 
    #print("sbox2B = ",sbox2B)  
    
    s_box, inv_s_box = update_sbox_pair(256, s_box_aes, inv_s_box_aes)
    print("AES_Sbox = ",s_box)
    print("\n")
    print("AES_Sbox_Inv = ",inv_s_box)
    runsboximage()
    h1, h2, h3 = find_entropy()
    a = h2
    print("\nAES SBox Entropy h = ",a)
    bahram_2021_inv_sbox = get_inv_sbox(bahram_2021_sbox, 256)
    
    s_box, inv_s_box = update_sbox_pair(256, bahram_2021_sbox, bahram_2021_inv_sbox)
    print("sbox_Bahram_2021 = ",s_box)
    print("\n")
    print("inv_sbox_Bahram_2021 = ",inv_s_box)
    runsboximage()
    h1, h2, h3 = find_entropy()
    b = h2
    print("\nLenna Entropy h = ",h1)
    print("\nAES SBox Entropy h = ",h2)
    print("\nBahram 2021 SBox Entropy h = ",b)#sBoxFRTL 
    sBoxBRTL = get_inv_sbox(sBoxFRTL ,256)
    s_box, inv_s_box = update_sbox_pair(256, sBoxFRTL ,sBoxBRTL)
    print("sBoxFRTL = ",s_box)
    print("\n")
    print("sBoxBRTL = ",inv_s_box)
    runsboximage()
    h1, h2, h3 = find_entropy()
    c = h2
    print("\nLenna Entropy h = ",h1)
    print("\nAES SBox Entropy h = ",a)
    print("\nBahram 2021 SBox Entropy h = ",b)
    print("\nsBoxRTL SBox Entropy h = ",c)
    #h2 = 10
    #h3 = 0
    h = best_entropy
    print("Final Generated SBOX PAIRS : ")
    print("sbox1F = ",sbox1F) 
    print("sbox1B = ",sbox1B)
    print("sbox2F = ",sbox2F) 
    print("sbox2B = ",sbox2B) 
    
    print("Final SBOX  with h = ",h2," Against Previous h = ",h, " : ")
    print("Latest Generated SBOX PAIRS : ")
    print("Normal   sbox = ",s_box) 
    print("Invserse sbox = ",inv_s_box)
    
    print("Generate Secure Sbox Program is Ended Successfully !!!")

def run_test():
    print("Test Program is Started........... !!!")
    learning_rate = 0.1
    len = 16
    #sbox1F =  [15, 14, 0, 1, 3, 2, 12, 13, 4, 9, 7, 10, 8, 5, 11, 6]
    #sbox1B =  [2, 3, 5, 4, 8, 13, 15, 10, 12, 9, 11, 14, 6, 7, 1, 0]

    print("sbox1F : ",sbox1F) 
    print("sbox1B : ",sbox1B)
    print("sbox2F : ",sbox2F) 
    print("sbox2B : ",sbox2B) 
    print("...................")
    generate_Dual_sboxFB(len)
    #sbox1F, sbox1B, sbox2F, sbox2B = generate_Dual_sboxFB(len)
    print("sbox1F : ",sbox1F) 
    print("sbox1B : ",sbox1B)
    print("sbox2F : ",sbox2F) 
    print("sbox2B : ",sbox2B) 
 
    runsboximage()
    find_entropy()
    input_vectors = np.array(
        [
            [3, 1.5],
            [2, 1],
            [4, 1.5],
            [3, 4],
            [3.5, 0.5],
            [2, 0.5],
            [5.5, 1],
            [1, 1],
        ]
    )
    weighted = [0.46859325, 0.38470667, 0.50443229, 0.70593514, 0.38825867, 0.33851452, 0.50817673, 0.35134321]
    sboxnn = NeuralNetwork(learning_rate)
    print("Prediction : ",sboxnn.predict(input_vectors))
    dot_product()
    #for i in range(len):
    #    sboxlist = random.sample(range(0, len), len)
    #    print("sboxList ,",i," : ",sboxlist)   
    #    print("The Entropy is ",entropy(sboxlist))

        
    
   
    print("Test Program is Ended Successfully !!!")

def sbox_forward(val, seed):
    # Program Started 
    #print("SBox Forward Program is Started........... !!!")  
    ret = val ^ seed 
    #print("SBox Forward Program is Ended Successfully !!!")
    return ret
    # Program Ended 
    
def sbox_backward(val, seed):
    # Program Started 
    #print("SBox Backward Program is Started........... !!!")
    ret = val ^ seed
    #print("SBox Backward Program is Ended Successfully !!!")
    return ret
    # Program Ended 

def generate_sbox_simple():
    # Program Started 
    print("Generate SBox Simple Program is Started........... !!!")
    len = 256
    seed = 54
    val = 10
    for i in range(len):
        sboxForward[i] = i#sbox_forward(i,seed)
        sboxBackward[sboxForward[i]] = i#sbox_backward(sboxForward[i],seed)
        #print("\nFor Val = ",i,", SBox Value Forward is ",sboxForward[i] , " and SBox Value Backward is ", sboxBackward[i],"\n")
    print("Entropy : ", entropy(sboxForward))
    print("sboxForward  = ",sboxForward)
    print("sboxBackward = ",sboxBackward)    
    print("Generate SBox Simple Program is Ended Successfully !!!")
    # Program Ended 

# Run the main program from here 
def run():
    print("Program is Started........... !!!")
    print("Run Program Here")
    generate_secure_sbox()
    #generate_sbox_simple()
    #run_test()
    #runsboxANN()
    print("Program is Ended Successfully !!!")

def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    #print_hi('Bilal')
    run()
